versions pytest-7.4.0, python-3.12.6.final.0
cwd=C:\Users\balle\Desktop\snippets\BattleBot\BattleBot
args=('-vv', '--verbose', '--debug', '--log-cli-level=DEBUG', '--full-trace', '--tb=long', '--showlocals', '--capture=no', '--durations=0', '--setup-show', '--verbosity=2', 'tests')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x000001B891D9A2D0>
    pytest_plugin_registered [hook]
        plugin: <Session BattleBot exitstatus='<UNSET>' testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x000001B891D9A2D0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000001B8927F0F20>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000001B89427F830>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x000001B891D9A2D0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\mark\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\legacypath.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\python_path.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_hypothesis_pytestplugin' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_hypothesis_pytestplugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest_cov\\plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='no' _global_capturing=<MultiCapture out=None err=None in_=None _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000001B8927F0F20>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000001B89427F830>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x000001B8928854F0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x000001B891DAD400>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x000001B891D9A2D0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\mark\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.legacypath' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\legacypath.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python_path' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\python_path.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unraisableexception' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\unraisableexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.threadexception' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\threadexception.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_hypothesis_pytestplugin' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_hypothesis_pytestplugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module 'pytest_cov.plugin' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest_cov\\plugin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='no' _global_capturing=<MultiCapture out=None err=None in_=None _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000001B8927F0F20>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000001B89427F830>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <class '_pytest.legacypath.LegacyTmpdirPlugin'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x000001B8928854F0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x000001B891DAD400>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x000001B894259A90>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B891E96810>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          start_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot
          startdir: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot
      early skip of rewriting module: email.parser [assertion]
      early skip of rewriting module: email.feedparser [assertion]
      matched marked file 'hypothesis' (from 'hypothesis') [assertion]
      find_module called for: hypothesis [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\__init__.py [assertion]
      matched marked file 'hypothesis._settings' (from 'hypothesis') [assertion]
      find_module called for: hypothesis._settings [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\_settings.py [assertion]
      early skip of rewriting module: attr [assertion]
      early skip of rewriting module: attr.converters [assertion]
      early skip of rewriting module: attr._compat [assertion]
      early skip of rewriting module: attr._make [assertion]
      early skip of rewriting module: attr._config [assertion]
      early skip of rewriting module: attr.setters [assertion]
      early skip of rewriting module: attr.exceptions [assertion]
      early skip of rewriting module: attr.filters [assertion]
      early skip of rewriting module: attr.validators [assertion]
      early skip of rewriting module: attr._cmp [assertion]
      early skip of rewriting module: attr._funcs [assertion]
      early skip of rewriting module: attr._next_gen [assertion]
      early skip of rewriting module: attr._version_info [assertion]
      matched marked file 'hypothesis.errors' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.errors [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\errors.py [assertion]
      matched marked file 'hypothesis.internal' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\__init__.py [assertion]
      matched marked file 'hypothesis.internal.compat' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.compat [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\compat.py [assertion]
      matched marked file 'hypothesis.internal.reflection' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.reflection [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\reflection.py [assertion]
      early skip of rewriting module: unittest.mock [assertion]
      early skip of rewriting module: asyncio [assertion]
      early skip of rewriting module: asyncio.base_events [assertion]
      early skip of rewriting module: concurrent [assertion]
      early skip of rewriting module: concurrent.futures [assertion]
      early skip of rewriting module: concurrent.futures._base [assertion]
      early skip of rewriting module: ssl [assertion]
      early skip of rewriting module: _ssl [assertion]
      early skip of rewriting module: asyncio.constants [assertion]
      early skip of rewriting module: asyncio.coroutines [assertion]
      early skip of rewriting module: asyncio.events [assertion]
      early skip of rewriting module: contextvars [assertion]
      early skip of rewriting module: _contextvars [assertion]
      early skip of rewriting module: asyncio.format_helpers [assertion]
      early skip of rewriting module: _asyncio [assertion]
      early skip of rewriting module: asyncio.base_futures [assertion]
      early skip of rewriting module: asyncio.exceptions [assertion]
      early skip of rewriting module: asyncio.base_tasks [assertion]
      early skip of rewriting module: asyncio.futures [assertion]
      early skip of rewriting module: asyncio.protocols [assertion]
      early skip of rewriting module: asyncio.sslproto [assertion]
      early skip of rewriting module: asyncio.transports [assertion]
      early skip of rewriting module: asyncio.log [assertion]
      early skip of rewriting module: asyncio.staggered [assertion]
      early skip of rewriting module: asyncio.locks [assertion]
      early skip of rewriting module: asyncio.mixins [assertion]
      early skip of rewriting module: asyncio.tasks [assertion]
      early skip of rewriting module: asyncio.timeouts [assertion]
      early skip of rewriting module: asyncio.trsock [assertion]
      early skip of rewriting module: asyncio.runners [assertion]
      early skip of rewriting module: asyncio.queues [assertion]
      early skip of rewriting module: asyncio.streams [assertion]
      early skip of rewriting module: asyncio.subprocess [assertion]
      early skip of rewriting module: asyncio.taskgroups [assertion]
      early skip of rewriting module: asyncio.threads [assertion]
      early skip of rewriting module: asyncio.windows_events [assertion]
      early skip of rewriting module: _overlapped [assertion]
      early skip of rewriting module: asyncio.base_subprocess [assertion]
      early skip of rewriting module: asyncio.proactor_events [assertion]
      early skip of rewriting module: asyncio.selector_events [assertion]
      early skip of rewriting module: asyncio.windows_utils [assertion]
      early skip of rewriting module: pkgutil [assertion]
      matched marked file 'hypothesis.utils' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.utils [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\utils\__init__.py [assertion]
      matched marked file 'hypothesis.utils.conventions' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.utils.conventions [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\utils\conventions.py [assertion]
      matched marked file 'hypothesis.vendor' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.vendor [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\vendor\__init__.py [assertion]
      matched marked file 'hypothesis.vendor.pretty' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.vendor.pretty [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\vendor\pretty.py [assertion]
      matched marked file 'hypothesis.internal.validation' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.validation [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\validation.py [assertion]
      matched marked file 'hypothesis.internal.coverage' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.coverage [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\coverage.py [assertion]
      matched marked file 'hypothesis.utils.dynamicvariables' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.utils.dynamicvariables [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\utils\dynamicvariables.py [assertion]
      matched marked file 'hypothesis.database' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.database [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\database.py [assertion]
      early skip of rewriting module: queue [assertion]
      early skip of rewriting module: _queue [assertion]
      early skip of rewriting module: urllib.error [assertion]
      early skip of rewriting module: urllib.response [assertion]
      early skip of rewriting module: urllib.request [assertion]
      early skip of rewriting module: http [assertion]
      early skip of rewriting module: http.client [assertion]
      early skip of rewriting module: nturl2path [assertion]
      matched marked file 'hypothesis.configuration' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.configuration [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\configuration.py [assertion]
      matched marked file 'hypothesis.internal.conjecture' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\__init__.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.data' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.data [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\data.py [assertion]
      matched marked file 'hypothesis.internal.cache' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.cache [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\cache.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.floats' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.floats [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\floats.py [assertion]
      early skip of rewriting module: array [assertion]
      matched marked file 'hypothesis.internal.floats' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.floats [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\floats.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.junkdrawer' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.junkdrawer [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\junkdrawer.py [assertion]
      early skip of rewriting module: sortedcontainers [assertion]
      early skip of rewriting module: sortedcontainers.sortedlist [assertion]
      early skip of rewriting module: sortedcontainers.sortedset [assertion]
      early skip of rewriting module: sortedcontainers.sorteddict [assertion]
      matched marked file 'hypothesis.internal.conjecture.utils' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.utils [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\utils.py [assertion]
      matched marked file 'hypothesis.internal.intervalsets' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.intervalsets [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\intervalsets.py [assertion]
      matched marked file 'hypothesis.reporting' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.reporting [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\reporting.py [assertion]
      matched marked file 'hypothesis.control' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.control [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\control.py [assertion]
      matched marked file 'hypothesis.internal.observability' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.observability [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\observability.py [assertion]
      matched marked file 'hypothesis.core' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.core [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\core.py [assertion]
      matched marked file 'hypothesis.strategies' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\__init__.py [assertion]
      matched marked file 'hypothesis.strategies._internal' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\__init__.py [assertion]
      matched marked file 'hypothesis.strategies._internal.strategies' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.strategies [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\strategies.py [assertion]
      matched marked file 'hypothesis.strategies._internal.utils' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.utils [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\utils.py [assertion]
      matched marked file 'hypothesis.strategies._internal.collections' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.collections [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\collections.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.engine' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.engine [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\engine.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.datatree' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.datatree [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\datatree.py [assertion]
      matched marked file 'hypothesis.internal.escalation' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.escalation [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\escalation.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.pareto' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.pareto [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\pareto.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinker' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinker [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\shrinker.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.choicetree' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.choicetree [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\choicetree.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\shrinking\__init__.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking.bytes' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking.bytes [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\shrinking\bytes.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking.collection' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking.collection [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\shrinking\collection.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking.common' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking.common [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\shrinking\common.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking.ordering' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking.ordering [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\shrinking\ordering.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking.integer' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking.integer [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\shrinking\integer.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking.floats' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking.floats [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\shrinking\floats.py [assertion]
      matched marked file 'hypothesis.internal.conjecture.shrinking.string' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.conjecture.shrinking.string [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\conjecture\shrinking\string.py [assertion]
      matched marked file 'hypothesis.internal.healthcheck' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.healthcheck [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\healthcheck.py [assertion]
      matched marked file 'hypothesis.internal.filtering' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.filtering [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\filtering.py [assertion]
      early skip of rewriting module: fractions [assertion]
      matched marked file 'hypothesis.strategies._internal.lazy' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.lazy [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\lazy.py [assertion]
      matched marked file 'hypothesis.strategies._internal.core' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.core [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\core.py [assertion]
      matched marked file 'hypothesis.internal.cathetus' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.cathetus [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\cathetus.py [assertion]
      matched marked file 'hypothesis.internal.charmap' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.charmap [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\charmap.py [assertion]
      early skip of rewriting module: gzip [assertion]
      matched marked file 'hypothesis.internal.entropy' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.entropy [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\entropy.py [assertion]
      matched marked file 'hypothesis.strategies._internal.deferred' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.deferred [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\deferred.py [assertion]
      matched marked file 'hypothesis.strategies._internal.functions' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.functions [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\functions.py [assertion]
      matched marked file 'hypothesis.strategies._internal.misc' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.misc [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\misc.py [assertion]
      matched marked file 'hypothesis.strategies._internal.numbers' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.numbers [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\numbers.py [assertion]
      matched marked file 'hypothesis.strategies._internal.recursive' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.recursive [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\recursive.py [assertion]
      matched marked file 'hypothesis.strategies._internal.shared' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.shared [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\shared.py [assertion]
      matched marked file 'hypothesis.strategies._internal.strings' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.strings [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\strings.py [assertion]
      matched marked file 'hypothesis.strategies._internal.datetime' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.datetime [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\datetime.py [assertion]
      early skip of rewriting module: zoneinfo [assertion]
      early skip of rewriting module: zoneinfo._tzpath [assertion]
      early skip of rewriting module: zoneinfo._common [assertion]
      early skip of rewriting module: _zoneinfo [assertion]
      matched marked file 'hypothesis.strategies._internal.ipaddress' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.strategies._internal.ipaddress [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\strategies\_internal\ipaddress.py [assertion]
      matched marked file 'hypothesis.internal.scrutineer' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.scrutineer [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\scrutineer.py [assertion]
      matched marked file 'hypothesis.statistics' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.statistics [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\statistics.py [assertion]
      matched marked file 'hypothesis.version' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.version [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\version.py [assertion]
      matched marked file 'hypothesis.entry_points' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.entry_points [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\entry_points.py [assertion]
      finish pytest_report_header --> [['rootdir: C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot', 'plugins: hypothesis-6.122.0, cov-4.1.0'], "hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase(WindowsPath('C:/Users/balle/Desktop/snippets/BattleBot/BattleBot/.hypothesis/examples'))", 'cachedir: .pytest_cache', ['using: pytest-7.4.0', 'setuptools registered plugins:', '  hypothesis-6.122.0 at C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_hypothesis_pytestplugin.py', '  pytest-cov-4.1.0 at C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest_cov\\plugin.py']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['tests'] [collection]
        pytest_collectstart [hook]
            collector: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (WindowsPath('C:/Users/balle/Desktop/snippets/BattleBot/BattleBot/tests'), []) [collection]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_battle_flow.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_battle_flow.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_battle_flow.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_battle_flow.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_character.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_character.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_character.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_character.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_character_management.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_character_management.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_character_management.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_character_management.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_combat.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_combat.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_combat.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_combat.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_damage.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_damage.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_damage.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_damage.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_healing.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_healing.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_healing.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_healing.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_input.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_input.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_input.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_input.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_input_parsing.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_input_parsing.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_input_parsing.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_input_parsing.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_state.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_state.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_state.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_state.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_targeting.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_targeting.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_targeting.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_targeting.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_temp_hp.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_temp_hp.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_temp_hp.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_temp_hp.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_validation.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_validation.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_validation.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\legacy_test_validation.py
            finish pytest_collect_file --> [] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\test_integration.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\test_integration.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\test_integration.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\test_integration.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\test_integration.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\test_integration.py
              finish pytest_pycollect_makemodule --> <Module tests/test_integration.py> [hook]
            finish pytest_collect_file --> [<Module tests/test_integration.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_battle_edge_cases.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_battle_edge_cases.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_battle_edge_cases.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_battle_edge_cases.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_battle_edge_cases.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_battle_edge_cases.py
              finish pytest_pycollect_makemodule --> <Module tests/battle/test_battle_edge_cases.py> [hook]
            finish pytest_collect_file --> [<Module tests/battle/test_battle_edge_cases.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_battle_rounds.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_battle_rounds.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_battle_rounds.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_battle_rounds.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_battle_rounds.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_battle_rounds.py
              finish pytest_pycollect_makemodule --> <Module tests/battle/test_battle_rounds.py> [hook]
            finish pytest_collect_file --> [<Module tests/battle/test_battle_rounds.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_flow.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_flow.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_flow.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_flow.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_flow.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_flow.py
              finish pytest_pycollect_makemodule --> <Module tests/battle/test_flow.py> [hook]
            finish pytest_collect_file --> [<Module tests/battle/test_flow.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_state.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_state.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_state.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_state.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_state.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_state.py
              finish pytest_pycollect_makemodule --> <Module tests/battle/test_state.py> [hook]
            finish pytest_collect_file --> [<Module tests/battle/test_state.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_targeting.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_targeting.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_targeting.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_targeting.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_targeting.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_targeting.py
              finish pytest_pycollect_makemodule --> <Module tests/battle/test_targeting.py> [hook]
            finish pytest_collect_file --> [<Module tests/battle/test_targeting.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_character_validation.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_character_validation.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_character_validation.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_character_validation.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_character_validation.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_character_validation.py
              finish pytest_pycollect_makemodule --> <Module tests/character/test_character_validation.py> [hook]
            finish pytest_collect_file --> [<Module tests/character/test_character_validation.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_creation.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_creation.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_creation.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_creation.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_creation.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_creation.py
              finish pytest_pycollect_makemodule --> <Module tests/character/test_creation.py> [hook]
            finish pytest_collect_file --> [<Module tests/character/test_creation.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_health.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_health.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_health.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_health.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_health.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_health.py
              finish pytest_pycollect_makemodule --> <Module tests/character/test_health.py> [hook]
            finish pytest_collect_file --> [<Module tests/character/test_health.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_interactions.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_interactions.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_interactions.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_interactions.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_interactions.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_interactions.py
              finish pytest_pycollect_makemodule --> <Module tests/character/test_interactions.py> [hook]
            finish pytest_collect_file --> [<Module tests/character/test_interactions.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_stats.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_stats.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_stats.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_stats.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_stats.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_stats.py
              finish pytest_pycollect_makemodule --> <Module tests/character/test_stats.py> [hook]
            finish pytest_collect_file --> [<Module tests/character/test_stats.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_temp_hp.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_temp_hp.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_temp_hp.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_temp_hp.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_temp_hp.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_temp_hp.py
              finish pytest_pycollect_makemodule --> <Module tests/character/test_temp_hp.py> [hook]
            finish pytest_collect_file --> [<Module tests/character/test_temp_hp.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_combat_edge_cases.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_combat_edge_cases.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_combat_edge_cases.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_combat_edge_cases.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_combat_edge_cases.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_combat_edge_cases.py
              finish pytest_pycollect_makemodule --> <Module tests/combat/test_combat_edge_cases.py> [hook]
            finish pytest_collect_file --> [<Module tests/combat/test_combat_edge_cases.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_combinations.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_combinations.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_combinations.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_combinations.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_combinations.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_combinations.py
              finish pytest_pycollect_makemodule --> <Module tests/combat/test_combinations.py> [hook]
            finish pytest_collect_file --> [<Module tests/combat/test_combinations.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_damage.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_damage.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_damage.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_damage.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_damage.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_damage.py
              finish pytest_pycollect_makemodule --> <Module tests/combat/test_damage.py> [hook]
            finish pytest_collect_file --> [<Module tests/combat/test_damage.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_healing.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_healing.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_healing.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_healing.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_healing.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_healing.py
              finish pytest_pycollect_makemodule --> <Module tests/combat/test_healing.py> [hook]
            finish pytest_collect_file --> [<Module tests/combat/test_healing.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input
            finish pytest_ignore_collect --> None [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input\test_input_validation.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input\test_input_validation.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input\test_input_validation.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input\test_input_validation.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input\test_input_validation.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input\test_input_validation.py
              finish pytest_pycollect_makemodule --> <Module tests/input/test_input_validation.py> [hook]
            finish pytest_collect_file --> [<Module tests/input/test_input_validation.py>] [hook]
            pytest_ignore_collect [hook]
                config: <_pytest.config.Config object at 0x000001B891D9A2D0>
                collection_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input\test_parsing.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input\test_parsing.py
            finish pytest_ignore_collect --> None [hook]
            pytest_collect_file [hook]
                parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                file_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input\test_parsing.py
                path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input\test_parsing.py
              pytest_pycollect_makemodule [hook]
                  parent: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
                  module_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input\test_parsing.py
                  path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input\test_parsing.py
              finish pytest_pycollect_makemodule --> <Module tests/input/test_parsing.py> [hook]
            finish pytest_collect_file --> [<Module tests/input/test_parsing.py>] [hook]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=18 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=18 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Module tests/test_integration.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/test_integration.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/test_integration.py>
      find_module called for: test_integration [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\test_integration.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\test_integration.py [assertion]
      early skip of rewriting module: Battle [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: parse_healing_input
            obj: <function parse_healing_input at 0x000001B8949DE7A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: parse_damage_input
            obj: <function parse_damage_input at 0x000001B8949DE840>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: test_full_combat_round
            obj: <function test_full_combat_round at 0x000001B8949DD9E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A047A0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_full_combat_round>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: test_combat_state_management
            obj: <function test_combat_state_management at 0x000001B8949DDF80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B89427DAC0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_combat_state_management>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/test_integration.py>
            name: test_input_parsing
            obj: <function test_input_parsing at 0x000001B8949DDDA0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894370E00>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_input_parsing>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/test_integration.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_full_combat_round> [collection]
      pytest_itemcollected [hook]
          item: <Function test_full_combat_round>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_combat_state_management> [collection]
      pytest_itemcollected [hook]
          item: <Function test_combat_state_management>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_input_parsing> [collection]
      pytest_itemcollected [hook]
          item: <Function test_input_parsing>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/test_integration.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/battle/test_battle_edge_cases.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/battle/test_battle_edge_cases.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/battle/test_battle_edge_cases.py>
      find_module called for: test_battle_edge_cases [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\battle\\test_battle_edge_cases.py' [assertion]
      _read_pyc(C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_battle_edge_cases.py): out of date [assertion]
      rewriting WindowsPath('C:/Users/balle/Desktop/snippets/BattleBot/BattleBot/tests/battle/test_battle_edge_cases.py') [assertion]
      matched marked file 'hypothesis.internal.detection' (from 'hypothesis') [assertion]
      find_module called for: hypothesis.internal.detection [assertion]
      found cached rewritten pyc for C:\Users\balle\AppData\Roaming\Python\Python312\site-packages\hypothesis\internal\detection.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_edge_cases.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_edge_cases.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_edge_cases.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_edge_cases.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_edge_cases.py>
            name: battle_round
            obj: <function battle_round at 0x000001B8949DEA20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_edge_cases.py>
            name: MockInput
            obj: <class 'test_battle_edge_cases.MockInput'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_edge_cases.py>
            name: mock_input
            obj: <function mock_input at 0x000001B8949DEFC0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_edge_cases.py>
            name: test_dead_character_interactions
            obj: <function test_dead_character_interactions at 0x000001B8949DF100>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A05BB0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_dead_character_interactions>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_edge_cases.py>
            name: test_round_state_persistence
            obj: <function test_round_state_persistence at 0x000001B8949DF240>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A04B90>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_round_state_persistence>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_edge_cases.py>
            name: test_initiative_edge_cases
            obj: <function test_initiative_edge_cases at 0x000001B8949DF2E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A04A40>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_initiative_edge_cases>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/battle/test_battle_edge_cases.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_dead_character_interactions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_dead_character_interactions>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_round_state_persistence> [collection]
      pytest_itemcollected [hook]
          item: <Function test_round_state_persistence>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_initiative_edge_cases> [collection]
      pytest_itemcollected [hook]
          item: <Function test_initiative_edge_cases>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/battle/test_battle_edge_cases.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/battle/test_battle_rounds.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/battle/test_battle_rounds.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/battle/test_battle_rounds.py>
      find_module called for: test_battle_rounds [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\battle\\test_battle_rounds.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_battle_rounds.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_rounds.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_rounds.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_rounds.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_rounds.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_rounds.py>
            name: battle_round
            obj: <function battle_round at 0x000001B8949DEA20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_rounds.py>
            name: MockInput
            obj: <class 'test_battle_rounds.MockInput'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_rounds.py>
            name: mock_inputs
            obj: <function mock_inputs at 0x000001B8949DF560>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_rounds.py>
            name: test_battle_round_order
            obj: <function test_battle_round_order at 0x000001B8949DF600>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A04AA0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_battle_round_order>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_rounds.py>
            name: test_battle_round_state
            obj: <function test_battle_round_state at 0x000001B8949DF6A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A053D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_battle_round_state>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_rounds.py>
            name: test_battle_round_edge_cases
            obj: <function test_battle_round_edge_cases at 0x000001B8949DF740>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A05310>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_battle_round_edge_cases>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_battle_rounds.py>
            name: test_combat_state_transitions
            obj: <function test_combat_state_transitions at 0x000001B8949DF7E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A07380>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_combat_state_transitions>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/battle/test_battle_rounds.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_battle_round_order> [collection]
      pytest_itemcollected [hook]
          item: <Function test_battle_round_order>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_battle_round_state> [collection]
      pytest_itemcollected [hook]
          item: <Function test_battle_round_state>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_battle_round_edge_cases> [collection]
      pytest_itemcollected [hook]
          item: <Function test_battle_round_edge_cases>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_combat_state_transitions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_combat_state_transitions>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/battle/test_battle_rounds.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/battle/test_flow.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/battle/test_flow.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/battle/test_flow.py>
      find_module called for: test_flow [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\battle\\test_flow.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_flow.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_flow.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_flow.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_flow.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_flow.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_flow.py>
            name: battle_round
            obj: <function battle_round at 0x000001B8949DEA20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_flow.py>
            name: test_initiative_order
            obj: <function test_initiative_order at 0x000001B8949DFB00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A04C50>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_initiative_order>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_flow.py>
            name: test_round_management
            obj: <function test_round_management at 0x000001B8949DFBA0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A04DD0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_round_management>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_flow.py>
            name: test_turn_sequence
            obj: <function test_turn_sequence at 0x000001B8949DFC40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A05F70>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_turn_sequence>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/battle/test_flow.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_initiative_order> [collection]
      pytest_itemcollected [hook]
          item: <Function test_initiative_order>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_round_management> [collection]
      pytest_itemcollected [hook]
          item: <Function test_round_management>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_turn_sequence> [collection]
      pytest_itemcollected [hook]
          item: <Function test_turn_sequence>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/battle/test_flow.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/battle/test_state.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/battle/test_state.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/battle/test_state.py>
      find_module called for: test_state [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\battle\\test_state.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_state.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_state.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_state.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_state.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_state.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_state.py>
            name: battle_round
            obj: <function battle_round at 0x000001B8949DEA20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_state.py>
            name: test_combat_state_transitions
            obj: <function test_combat_state_transitions at 0x000001B8949DFE20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A06810>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_combat_state_transitions>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_state.py>
            name: test_dead_character_state
            obj: <function test_dead_character_state at 0x000001B8949DFEC0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A06900>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_dead_character_state>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_state.py>
            name: test_aggro_state
            obj: <function test_aggro_state at 0x000001B8949DFF60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A069C0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_aggro_state>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/battle/test_state.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_combat_state_transitions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_combat_state_transitions>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_dead_character_state> [collection]
      pytest_itemcollected [hook]
          item: <Function test_dead_character_state>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_aggro_state> [collection]
      pytest_itemcollected [hook]
          item: <Function test_aggro_state>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/battle/test_state.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/battle/test_targeting.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/battle/test_targeting.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/battle/test_targeting.py>
      find_module called for: test_targeting [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\battle\\test_targeting.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\battle\test_targeting.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_targeting.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_targeting.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_targeting.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_targeting.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_targeting.py>
            name: battle_round
            obj: <function battle_round at 0x000001B8949DEA20>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_targeting.py>
            name: test_basic_targeting
            obj: <function test_basic_targeting at 0x000001B894A302C0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A06D80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_basic_targeting>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_targeting.py>
            name: test_aggro_targeting
            obj: <function test_aggro_targeting at 0x000001B894A30360>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A06F00>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_aggro_targeting>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_targeting.py>
            name: test_targeting_restrictions
            obj: <function test_targeting_restrictions at 0x000001B894A30400>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A06E40>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_targeting_restrictions>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/battle/test_targeting.py>
            name: test_empty_aggro
            obj: <function test_empty_aggro at 0x000001B894A304A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A07050>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_empty_aggro>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/battle/test_targeting.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_basic_targeting> [collection]
      pytest_itemcollected [hook]
          item: <Function test_basic_targeting>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_aggro_targeting> [collection]
      pytest_itemcollected [hook]
          item: <Function test_aggro_targeting>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_targeting_restrictions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_targeting_restrictions>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_empty_aggro> [collection]
      pytest_itemcollected [hook]
          item: <Function test_empty_aggro>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/battle/test_targeting.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/character/test_character_validation.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/character/test_character_validation.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/character/test_character_validation.py>
      find_module called for: test_character_validation [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\character\\test_character_validation.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_character_validation.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_character_validation.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_character_validation.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_character_validation.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_character_validation.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_character_validation.py>
            name: test_character_creation_validation
            obj: <function test_character_creation_validation at 0x000001B894A305E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A072F0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_character_creation_validation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_character_validation.py>
            name: test_stat_modification_validation
            obj: <function test_stat_modification_validation at 0x000001B894A30720>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A07110>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_stat_modification_validation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_character_validation.py>
            name: test_state_validation
            obj: <function test_state_validation at 0x000001B894A307C0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A071D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_state_validation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_character_validation.py>
            name: test_tag_system_validation
            obj: <function test_tag_system_validation at 0x000001B894A30860>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A076B0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_tag_system_validation>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/character/test_character_validation.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_character_creation_validation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_character_creation_validation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_stat_modification_validation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_stat_modification_validation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_state_validation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_state_validation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_tag_system_validation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_tag_system_validation>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/character/test_character_validation.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/character/test_creation.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/character/test_creation.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/character/test_creation.py>
      find_module called for: test_creation [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\character\\test_creation.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_creation.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_creation.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_creation.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_creation.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_creation.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_creation.py>
            name: test_basic_character_creation
            obj: <function test_basic_character_creation at 0x000001B894A30220>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A069C0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_basic_character_creation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_creation.py>
            name: test_character_creation_enemy
            obj: <function test_character_creation_enemy at 0x000001B894A30540>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A05280>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_character_creation_enemy>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_creation.py>
            name: test_character_creation_numeric_inputs
            obj: <function test_character_creation_numeric_inputs at 0x000001B894A30680>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A06DB0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_character_creation_numeric_inputs>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/character/test_creation.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_basic_character_creation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_basic_character_creation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_character_creation_enemy> [collection]
      pytest_itemcollected [hook]
          item: <Function test_character_creation_enemy>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_character_creation_numeric_inputs> [collection]
      pytest_itemcollected [hook]
          item: <Function test_character_creation_numeric_inputs>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/character/test_creation.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/character/test_health.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/character/test_health.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/character/test_health.py>
      find_module called for: test_health [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\character\\test_health.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_health.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_health.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_health.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_health.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_health.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_health.py>
            name: test_health_range_validation
            obj: <function test_health_range_validation at 0x000001B894A30AE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A07770>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_health_range_validation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_health.py>
            name: test_health_state_consistency
            obj: <function test_health_state_consistency at 0x000001B894A30B80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A07290>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_health_state_consistency>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_health.py>
            name: test_death_state
            obj: <function test_death_state at 0x000001B894A30C20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A05130>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_death_state>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/character/test_health.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_health_range_validation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_health_range_validation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_health_state_consistency> [collection]
      pytest_itemcollected [hook]
          item: <Function test_health_state_consistency>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_death_state> [collection]
      pytest_itemcollected [hook]
          item: <Function test_death_state>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/character/test_health.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/character/test_interactions.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/character/test_interactions.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/character/test_interactions.py>
      find_module called for: test_interactions [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\character\\test_interactions.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_interactions.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_interactions.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_interactions.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_interactions.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_interactions.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_interactions.py>
            name: test_cross_character_effects
            obj: <function test_cross_character_effects at 0x000001B894A30CC0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A07D10>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_cross_character_effects>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_interactions.py>
            name: test_shared_state_handling
            obj: <function test_shared_state_handling at 0x000001B894A30D60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A07CE0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_shared_state_handling>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_interactions.py>
            name: test_team_based_interactions
            obj: <function test_team_based_interactions at 0x000001B894A30E00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A07C20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_team_based_interactions>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_interactions.py>
            name: test_reference_handling
            obj: <function test_reference_handling at 0x000001B894A30EA0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A07FB0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_reference_handling>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/character/test_interactions.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_cross_character_effects> [collection]
      pytest_itemcollected [hook]
          item: <Function test_cross_character_effects>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_shared_state_handling> [collection]
      pytest_itemcollected [hook]
          item: <Function test_shared_state_handling>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_team_based_interactions> [collection]
      pytest_itemcollected [hook]
          item: <Function test_team_based_interactions>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_reference_handling> [collection]
      pytest_itemcollected [hook]
          item: <Function test_reference_handling>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/character/test_interactions.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/character/test_stats.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/character/test_stats.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/character/test_stats.py>
      find_module called for: test_stats [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\character\\test_stats.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_stats.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_stats.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_stats.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_stats.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_stats.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_stats.py>
            name: test_stat_range_validation
            obj: <function test_stat_range_validation at 0x000001B894A30FE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A742F0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_stat_range_validation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_stats.py>
            name: test_stat_type_validation
            obj: <function test_stat_type_validation at 0x000001B894A31080>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A74350>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_stat_type_validation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_stats.py>
            name: test_stat_consistency
            obj: <function test_stat_consistency at 0x000001B894A31120>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A74620>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_stat_consistency>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/character/test_stats.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_stat_range_validation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_stat_range_validation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_stat_type_validation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_stat_type_validation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_stat_consistency> [collection]
      pytest_itemcollected [hook]
          item: <Function test_stat_consistency>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/character/test_stats.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/character/test_temp_hp.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/character/test_temp_hp.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/character/test_temp_hp.py>
      find_module called for: test_temp_hp [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\character\\test_temp_hp.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\character\test_temp_hp.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_temp_hp.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_temp_hp.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_temp_hp.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_temp_hp.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_temp_hp.py>
            name: test_temp_hp_stacking
            obj: <function test_temp_hp_stacking at 0x000001B894A31440>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A74800>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_temp_hp_stacking>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_temp_hp.py>
            name: test_temp_hp_damage_absorption
            obj: <function test_temp_hp_damage_absorption at 0x000001B894A314E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A74350>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_temp_hp_damage_absorption>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_temp_hp.py>
            name: test_temp_hp_damage_types
            obj: <function test_temp_hp_damage_types at 0x000001B894A31580>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A747D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_temp_hp_damage_types>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/character/test_temp_hp.py>
            name: test_temp_hp_edge_cases
            obj: <function test_temp_hp_edge_cases at 0x000001B894A31620>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A74B60>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_temp_hp_edge_cases>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/character/test_temp_hp.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_temp_hp_stacking> [collection]
      pytest_itemcollected [hook]
          item: <Function test_temp_hp_stacking>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_temp_hp_damage_absorption> [collection]
      pytest_itemcollected [hook]
          item: <Function test_temp_hp_damage_absorption>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_temp_hp_damage_types> [collection]
      pytest_itemcollected [hook]
          item: <Function test_temp_hp_damage_types>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_temp_hp_edge_cases> [collection]
      pytest_itemcollected [hook]
          item: <Function test_temp_hp_edge_cases>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/character/test_temp_hp.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/combat/test_combat_edge_cases.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/combat/test_combat_edge_cases.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/combat/test_combat_edge_cases.py>
      find_module called for: test_combat_edge_cases [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\combat\\test_combat_edge_cases.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_combat_edge_cases.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combat_edge_cases.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combat_edge_cases.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combat_edge_cases.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combat_edge_cases.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combat_edge_cases.py>
            name: test_resistance_edge_cases
            obj: <function test_resistance_edge_cases at 0x000001B894A318A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A07FE0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_resistance_edge_cases>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combat_edge_cases.py>
            name: test_damage_type_validation
            obj: <function test_damage_type_validation at 0x000001B894A31940>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A06DB0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_damage_type_validation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combat_edge_cases.py>
            name: test_healing_edge_cases
            obj: <function test_healing_edge_cases at 0x000001B894A319E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A07FE0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_healing_edge_cases>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combat_edge_cases.py>
            name: test_damage_calculation_error_handling
            obj: <function test_damage_calculation_error_handling at 0x000001B894A31A80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A07F80>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_damage_calculation_error_handling>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/combat/test_combat_edge_cases.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_resistance_edge_cases> [collection]
      pytest_itemcollected [hook]
          item: <Function test_resistance_edge_cases>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_damage_type_validation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_damage_type_validation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_healing_edge_cases> [collection]
      pytest_itemcollected [hook]
          item: <Function test_healing_edge_cases>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_damage_calculation_error_handling> [collection]
      pytest_itemcollected [hook]
          item: <Function test_damage_calculation_error_handling>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/combat/test_combat_edge_cases.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/combat/test_combinations.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/combat/test_combinations.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/combat/test_combinations.py>
      find_module called for: test_combinations [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\combat\\test_combinations.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_combinations.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combinations.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combinations.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combinations.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combinations.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combinations.py>
            name: test_damage_type_combinations
            obj: <function test_damage_type_combinations at 0x000001B894A31D00>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A747D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_damage_type_combinations>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combinations.py>
            name: test_healing_type_combinations
            obj: <function test_healing_type_combinations at 0x000001B894A31DA0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A75130>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_healing_type_combinations>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combinations.py>
            name: test_resistance_combinations
            obj: <function test_resistance_combinations at 0x000001B894A31E40>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A75160>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_resistance_combinations>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_combinations.py>
            name: test_edge_case_combinations
            obj: <function test_edge_case_combinations at 0x000001B894A31EE0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A75220>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_edge_case_combinations>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/combat/test_combinations.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_damage_type_combinations> [collection]
      pytest_itemcollected [hook]
          item: <Function test_damage_type_combinations>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_healing_type_combinations> [collection]
      pytest_itemcollected [hook]
          item: <Function test_healing_type_combinations>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_resistance_combinations> [collection]
      pytest_itemcollected [hook]
          item: <Function test_resistance_combinations>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_edge_case_combinations> [collection]
      pytest_itemcollected [hook]
          item: <Function test_edge_case_combinations>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/combat/test_combinations.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/combat/test_damage.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/combat/test_damage.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/combat/test_damage.py>
      find_module called for: test_damage [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\combat\\test_damage.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_damage.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_damage.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_damage.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_damage.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_damage.py>
            name: test_damage_calculation
            obj: <function test_damage_calculation at 0x000001B894A31F80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A75400>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_damage_calculation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_damage.py>
            name: test_damage_resistance
            obj: <function test_damage_resistance at 0x000001B894A32020>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A75460>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_damage_resistance>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_damage.py>
            name: test_damage_edge_cases
            obj: <function test_damage_edge_cases at 0x000001B894A320C0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A75340>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_damage_edge_cases>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_damage.py>
            name: test_generate_aggro_damage
            obj: <function test_generate_aggro_damage at 0x000001B894A32160>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A75640>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_generate_aggro_damage>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/combat/test_damage.py' lenresult=4 outcome='passed'> [hook]
    genitems <Function test_damage_calculation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_damage_calculation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_damage_resistance> [collection]
      pytest_itemcollected [hook]
          item: <Function test_damage_resistance>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_damage_edge_cases> [collection]
      pytest_itemcollected [hook]
          item: <Function test_damage_edge_cases>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_generate_aggro_damage> [collection]
      pytest_itemcollected [hook]
          item: <Function test_generate_aggro_damage>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/combat/test_damage.py' lenresult=4 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/combat/test_healing.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/combat/test_healing.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/combat/test_healing.py>
      find_module called for: test_healing [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\combat\\test_healing.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\combat\test_healing.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_healing.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_healing.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_healing.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_healing.py>
            name: Character
            obj: <class 'Battle.Character'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_healing.py>
            name: test_healing_calculation
            obj: <function test_healing_calculation at 0x000001B894A32340>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A75880>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_healing_calculation>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_healing.py>
            name: test_temp_healing
            obj: <function test_temp_healing at 0x000001B894A323E0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A75A00>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_temp_healing>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/combat/test_healing.py>
            name: test_healing_edge_cases
            obj: <function test_healing_edge_cases at 0x000001B894A32480>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A758B0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_healing_edge_cases>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/combat/test_healing.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_healing_calculation> [collection]
      pytest_itemcollected [hook]
          item: <Function test_healing_calculation>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_temp_healing> [collection]
      pytest_itemcollected [hook]
          item: <Function test_temp_healing>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_healing_edge_cases> [collection]
      pytest_itemcollected [hook]
          item: <Function test_healing_edge_cases>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/combat/test_healing.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/input/test_input_validation.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/input/test_input_validation.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/input/test_input_validation.py>
      find_module called for: test_input_validation [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\input\\test_input_validation.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input\test_input_validation.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_input_validation.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_input_validation.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_input_validation.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_input_validation.py>
            name: parse_damage_input
            obj: <function parse_damage_input at 0x000001B8949DE840>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_input_validation.py>
            name: parse_healing_input
            obj: <function parse_healing_input at 0x000001B8949DE7A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_input_validation.py>
            name: test_damage_input_edge_cases
            obj: <function test_damage_input_edge_cases at 0x000001B894A32700>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A75B20>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_damage_input_edge_cases>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_input_validation.py>
            name: test_healing_input_edge_cases
            obj: <function test_healing_input_edge_cases at 0x000001B894A327A0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A75D00>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_healing_input_edge_cases>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_input_validation.py>
            name: test_input_retry_mechanism
            obj: <function test_input_retry_mechanism at 0x000001B894A32840>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A75CA0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_input_retry_mechanism>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/input/test_input_validation.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_damage_input_edge_cases> [collection]
      pytest_itemcollected [hook]
          item: <Function test_damage_input_edge_cases>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_healing_input_edge_cases> [collection]
      pytest_itemcollected [hook]
          item: <Function test_healing_input_edge_cases>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_input_retry_mechanism> [collection]
      pytest_itemcollected [hook]
          item: <Function test_input_retry_mechanism>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/input/test_input_validation.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
    genitems <Module tests/input/test_parsing.py> [collection]
      pytest_collectstart [hook]
          collector: <Module tests/input/test_parsing.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module tests/input/test_parsing.py>
      find_module called for: test_parsing [assertion]
      matched test file 'C:\\Users\\balle\\Desktop\\snippets\\BattleBot\\BattleBot\\tests\\input\\test_parsing.py' [assertion]
      found cached rewritten pyc for C:\Users\balle\Desktop\snippets\BattleBot\BattleBot\tests\input\test_parsing.py [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_parsing.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_parsing.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_parsing.py>
            name: pytest
            obj: <module 'pytest' from 'C:\\Users\\balle\\AppData\\Roaming\\Python\\Python312\\site-packages\\pytest\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_parsing.py>
            name: parse_damage_input
            obj: <function parse_damage_input at 0x000001B8949DE840>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_parsing.py>
            name: parse_healing_input
            obj: <function parse_healing_input at 0x000001B8949DE7A0>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_parsing.py>
            name: test_damage_input_parsing
            obj: <function test_damage_input_parsing at 0x000001B894A32980>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A760C0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_damage_input_parsing>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_parsing.py>
            name: test_healing_input_parsing
            obj: <function test_healing_input_parsing at 0x000001B894A32A20>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A76150>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_healing_input_parsing>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module tests/input/test_parsing.py>
            name: test_input_edge_cases
            obj: <function test_input_edge_cases at 0x000001B894A32AC0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B894A76120>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_input_edge_cases>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'tests/input/test_parsing.py' lenresult=3 outcome='passed'> [hook]
    genitems <Function test_damage_input_parsing> [collection]
      pytest_itemcollected [hook]
          item: <Function test_damage_input_parsing>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_healing_input_parsing> [collection]
      pytest_itemcollected [hook]
          item: <Function test_healing_input_parsing>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_input_edge_cases> [collection]
      pytest_itemcollected [hook]
          item: <Function test_input_edge_cases>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'tests/input/test_parsing.py' lenresult=3 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          items: [<Function test_full_combat_round>, <Function test_combat_state_management>, <Function test_input_parsing>, <Function test_dead_character_interactions>, <Function test_round_state_persistence>, <Function test_initiative_edge_cases>, <Function test_battle_round_order>, <Function test_battle_round_state>, <Function test_battle_round_edge_cases>, <Function test_combat_state_transitions>, <Function test_initiative_order>, <Function test_round_management>, <Function test_turn_sequence>, <Function test_combat_state_transitions>, <Function test_dead_character_state>, <Function test_aggro_state>, <Function test_basic_targeting>, <Function test_aggro_targeting>, <Function test_targeting_restrictions>, <Function test_empty_aggro>, <Function test_character_creation_validation>, <Function test_stat_modification_validation>, <Function test_state_validation>, <Function test_tag_system_validation>, <Function test_basic_character_creation>, <Function test_character_creation_enemy>, <Function test_character_creation_numeric_inputs>, <Function test_health_range_validation>, <Function test_health_state_consistency>, <Function test_death_state>, <Function test_cross_character_effects>, <Function test_shared_state_handling>, <Function test_team_based_interactions>, <Function test_reference_handling>, <Function test_stat_range_validation>, <Function test_stat_type_validation>, <Function test_stat_consistency>, <Function test_temp_hp_stacking>, <Function test_temp_hp_damage_absorption>, <Function test_temp_hp_damage_types>, <Function test_temp_hp_edge_cases>, <Function test_resistance_edge_cases>, <Function test_damage_type_validation>, <Function test_healing_edge_cases>, <Function test_damage_calculation_error_handling>, <Function test_damage_type_combinations>, <Function test_healing_type_combinations>, <Function test_resistance_combinations>, <Function test_edge_case_combinations>, <Function test_damage_calculation>, <Function test_damage_resistance>, <Function test_damage_edge_cases>, <Function test_generate_aggro_damage>, <Function test_healing_calculation>, <Function test_temp_healing>, <Function test_healing_edge_cases>, <Function test_damage_input_edge_cases>, <Function test_healing_input_edge_cases>, <Function test_input_retry_mechanism>, <Function test_damage_input_parsing>, <Function test_healing_input_parsing>, <Function test_input_edge_cases>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x000001B891D9A2D0>
            items: [<Function test_full_combat_round>, <Function test_combat_state_management>, <Function test_input_parsing>, <Function test_dead_character_interactions>, <Function test_round_state_persistence>, <Function test_initiative_edge_cases>, <Function test_battle_round_order>, <Function test_battle_round_state>, <Function test_battle_round_edge_cases>, <Function test_combat_state_transitions>, <Function test_initiative_order>, <Function test_round_management>, <Function test_turn_sequence>, <Function test_combat_state_transitions>, <Function test_dead_character_state>, <Function test_aggro_state>, <Function test_basic_targeting>, <Function test_aggro_targeting>, <Function test_targeting_restrictions>, <Function test_empty_aggro>, <Function test_character_creation_validation>, <Function test_stat_modification_validation>, <Function test_state_validation>, <Function test_tag_system_validation>, <Function test_basic_character_creation>, <Function test_character_creation_enemy>, <Function test_character_creation_numeric_inputs>, <Function test_health_range_validation>, <Function test_health_state_consistency>, <Function test_death_state>, <Function test_cross_character_effects>, <Function test_shared_state_handling>, <Function test_team_based_interactions>, <Function test_reference_handling>, <Function test_stat_range_validation>, <Function test_stat_type_validation>, <Function test_stat_consistency>, <Function test_temp_hp_stacking>, <Function test_temp_hp_damage_absorption>, <Function test_temp_hp_damage_types>, <Function test_temp_hp_edge_cases>, <Function test_resistance_edge_cases>, <Function test_damage_type_validation>, <Function test_healing_edge_cases>, <Function test_damage_calculation_error_handling>, <Function test_damage_type_combinations>, <Function test_healing_type_combinations>, <Function test_resistance_combinations>, <Function test_edge_case_combinations>, <Function test_damage_calculation>, <Function test_damage_resistance>, <Function test_damage_edge_cases>, <Function test_generate_aggro_damage>, <Function test_healing_calculation>, <Function test_temp_healing>, <Function test_healing_edge_cases>, <Function test_damage_input_edge_cases>, <Function test_healing_input_edge_cases>, <Function test_input_retry_mechanism>, <Function test_damage_input_parsing>, <Function test_healing_input_parsing>, <Function test_input_edge_cases>]
            start_path: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot
            startdir: C:\Users\balle\Desktop\snippets\BattleBot\BattleBot
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session BattleBot exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=62>
      pytest_runtest_protocol [hook]
          item: <Function test_full_combat_round>
          nextitem: <Function test_combat_state_management>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_integration.py::test_full_combat_round
            location: ('tests\\test_integration.py', 4, 'test_full_combat_round')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_full_combat_round>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_full_combat_round>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_full_combat_round' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_full_combat_round' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_full_combat_round' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_full_combat_round>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_full_combat_round>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_full_combat_round>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_full_combat_round' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_full_combat_round' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_full_combat_round' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_full_combat_round>
            nextitem: <Function test_combat_state_management>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_full_combat_round>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_full_combat_round' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_full_combat_round' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_full_combat_round' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_integration.py::test_full_combat_round
            location: ('tests\\test_integration.py', 4, 'test_full_combat_round')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_combat_state_management>
          nextitem: <Function test_input_parsing>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_integration.py::test_combat_state_management
            location: ('tests\\test_integration.py', 42, 'test_combat_state_management')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_combat_state_management>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_combat_state_management>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_combat_state_management' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_combat_state_management' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_combat_state_management' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_combat_state_management>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_combat_state_management>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_combat_state_management>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_combat_state_management' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_combat_state_management' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_combat_state_management' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_combat_state_management>
            nextitem: <Function test_input_parsing>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_combat_state_management>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_combat_state_management' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_combat_state_management' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_combat_state_management' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_integration.py::test_combat_state_management
            location: ('tests\\test_integration.py', 42, 'test_combat_state_management')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_input_parsing>
          nextitem: <Function test_dead_character_interactions>
        pytest_runtest_logstart [hook]
            nodeid: tests/test_integration.py::test_input_parsing
            location: ('tests\\test_integration.py', 72, 'test_input_parsing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_input_parsing>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_input_parsing>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_input_parsing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_input_parsing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_input_parsing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_input_parsing>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_input_parsing>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_input_parsing>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_input_parsing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_input_parsing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_input_parsing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_input_parsing>
            nextitem: <Function test_dead_character_interactions>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_input_parsing>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/test_integration.py::test_input_parsing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/test_integration.py::test_input_parsing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/test_integration.py::test_input_parsing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/test_integration.py::test_input_parsing
            location: ('tests\\test_integration.py', 72, 'test_input_parsing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_dead_character_interactions>
          nextitem: <Function test_round_state_persistence>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_battle_edge_cases.py::test_dead_character_interactions
            location: ('tests\\battle\\test_battle_edge_cases.py', 29, 'test_dead_character_interactions')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_dead_character_interactions>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dead_character_interactions>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_edge_cases.py::test_dead_character_interactions' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_dead_character_interactions' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_dead_character_interactions' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_dead_character_interactions>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_dead_character_interactions>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dead_character_interactions>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_edge_cases.py::test_dead_character_interactions' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_dead_character_interactions' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_dead_character_interactions' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_dead_character_interactions>
            nextitem: <Function test_round_state_persistence>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dead_character_interactions>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_edge_cases.py::test_dead_character_interactions' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_dead_character_interactions' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_dead_character_interactions' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_battle_edge_cases.py::test_dead_character_interactions
            location: ('tests\\battle\\test_battle_edge_cases.py', 29, 'test_dead_character_interactions')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_round_state_persistence>
          nextitem: <Function test_initiative_edge_cases>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_battle_edge_cases.py::test_round_state_persistence
            location: ('tests\\battle\\test_battle_edge_cases.py', 65, 'test_round_state_persistence')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_round_state_persistence>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_round_state_persistence>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x000001B894A75B80> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_input' scope='function' baseid='tests/battle/test_battle_edge_cases.py'>
              request: <SubRequest 'mock_input' for <Function test_round_state_persistence>>
          finish pytest_fixture_setup --> <function mock_input.<locals>.configure_mock at 0x000001B894A33240> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_round_state_persistence>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_edge_cases.py::test_round_state_persistence' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_round_state_persistence' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_round_state_persistence' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_round_state_persistence>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_round_state_persistence>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_round_state_persistence>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_edge_cases.py::test_round_state_persistence' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_round_state_persistence' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_round_state_persistence' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_round_state_persistence>
            nextitem: <Function test_initiative_edge_cases>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_input' scope='function' baseid='tests/battle/test_battle_edge_cases.py'>
              request: <SubRequest 'mock_input' for <Function test_round_state_persistence>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_input' scope='function' baseid='tests/battle/test_battle_edge_cases.py'>
              request: <SubRequest 'mock_input' for <Function test_round_state_persistence>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_round_state_persistence>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_round_state_persistence>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_edge_cases.py::test_round_state_persistence' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_round_state_persistence' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_round_state_persistence' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_battle_edge_cases.py::test_round_state_persistence
            location: ('tests\\battle\\test_battle_edge_cases.py', 65, 'test_round_state_persistence')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_initiative_edge_cases>
          nextitem: <Function test_battle_round_order>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_battle_edge_cases.py::test_initiative_edge_cases
            location: ('tests\\battle\\test_battle_edge_cases.py', 100, 'test_initiative_edge_cases')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_initiative_edge_cases>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_initiative_edge_cases>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_edge_cases.py::test_initiative_edge_cases' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_initiative_edge_cases' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_initiative_edge_cases' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_initiative_edge_cases>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_initiative_edge_cases>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_initiative_edge_cases>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_edge_cases.py::test_initiative_edge_cases' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_initiative_edge_cases' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_initiative_edge_cases' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_initiative_edge_cases>
            nextitem: <Function test_battle_round_order>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_initiative_edge_cases>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_edge_cases.py::test_initiative_edge_cases' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_initiative_edge_cases' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_edge_cases.py::test_initiative_edge_cases' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_battle_edge_cases.py::test_initiative_edge_cases
            location: ('tests\\battle\\test_battle_edge_cases.py', 100, 'test_initiative_edge_cases')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_battle_round_order>
          nextitem: <Function test_battle_round_state>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_battle_rounds.py::test_battle_round_order
            location: ('tests\\battle\\test_battle_rounds.py', 36, 'test_battle_round_order')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_battle_round_order>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_battle_round_order>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x000001B894A75130> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_inputs' scope='function' baseid='tests/battle/test_battle_rounds.py'>
              request: <SubRequest 'mock_inputs' for <Function test_battle_round_order>>
          finish pytest_fixture_setup --> <function mock_inputs.<locals>.configure_mock at 0x000001B894A332E0> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_battle_round_order>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_order' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_order' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_order' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_battle_round_order>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_battle_round_order>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_battle_round_order>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_order' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_order' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_order' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_battle_round_order>
            nextitem: <Function test_battle_round_state>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_inputs' scope='function' baseid='tests/battle/test_battle_rounds.py'>
              request: <SubRequest 'mock_inputs' for <Function test_battle_round_order>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_inputs' scope='function' baseid='tests/battle/test_battle_rounds.py'>
              request: <SubRequest 'mock_inputs' for <Function test_battle_round_order>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_battle_round_order>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_battle_round_order>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_order' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_order' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_order' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_battle_rounds.py::test_battle_round_order
            location: ('tests\\battle\\test_battle_rounds.py', 36, 'test_battle_round_order')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_battle_round_state>
          nextitem: <Function test_battle_round_edge_cases>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_battle_rounds.py::test_battle_round_state
            location: ('tests\\battle\\test_battle_rounds.py', 64, 'test_battle_round_state')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_battle_round_state>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_battle_round_state>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x000001B894A75AC0> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_inputs' scope='function' baseid='tests/battle/test_battle_rounds.py'>
              request: <SubRequest 'mock_inputs' for <Function test_battle_round_state>>
          finish pytest_fixture_setup --> <function mock_inputs.<locals>.configure_mock at 0x000001B894A33420> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_battle_round_state>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_state' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_state' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_state' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_battle_round_state>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_battle_round_state>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_battle_round_state>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_state' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_state' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_state' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_battle_round_state>
            nextitem: <Function test_battle_round_edge_cases>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_inputs' scope='function' baseid='tests/battle/test_battle_rounds.py'>
              request: <SubRequest 'mock_inputs' for <Function test_battle_round_state>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_inputs' scope='function' baseid='tests/battle/test_battle_rounds.py'>
              request: <SubRequest 'mock_inputs' for <Function test_battle_round_state>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_battle_round_state>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_battle_round_state>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_state' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_state' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_state' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_battle_rounds.py::test_battle_round_state
            location: ('tests\\battle\\test_battle_rounds.py', 64, 'test_battle_round_state')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_battle_round_edge_cases>
          nextitem: <Function test_combat_state_transitions>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_battle_rounds.py::test_battle_round_edge_cases
            location: ('tests\\battle\\test_battle_rounds.py', 107, 'test_battle_round_edge_cases')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_battle_round_edge_cases>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_battle_round_edge_cases>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x000001B894A75280> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_inputs' scope='function' baseid='tests/battle/test_battle_rounds.py'>
              request: <SubRequest 'mock_inputs' for <Function test_battle_round_edge_cases>>
          finish pytest_fixture_setup --> <function mock_inputs.<locals>.configure_mock at 0x000001B894A33380> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_battle_round_edge_cases>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_edge_cases' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_edge_cases' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_edge_cases' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_battle_round_edge_cases>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_battle_round_edge_cases>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_battle_round_edge_cases>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_edge_cases' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_edge_cases' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_edge_cases' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_battle_round_edge_cases>
            nextitem: <Function test_combat_state_transitions>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_inputs' scope='function' baseid='tests/battle/test_battle_rounds.py'>
              request: <SubRequest 'mock_inputs' for <Function test_battle_round_edge_cases>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_inputs' scope='function' baseid='tests/battle/test_battle_rounds.py'>
              request: <SubRequest 'mock_inputs' for <Function test_battle_round_edge_cases>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_battle_round_edge_cases>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_battle_round_edge_cases>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_edge_cases' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_edge_cases' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_rounds.py::test_battle_round_edge_cases' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_battle_rounds.py::test_battle_round_edge_cases
            location: ('tests\\battle\\test_battle_rounds.py', 107, 'test_battle_round_edge_cases')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_combat_state_transitions>
          nextitem: <Function test_initiative_order>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_battle_rounds.py::test_combat_state_transitions
            location: ('tests\\battle\\test_battle_rounds.py', 133, 'test_combat_state_transitions')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_combat_state_transitions>
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_combat_state_transitions>>
          finish pytest_fixture_setup --> <_pytest.monkeypatch.MonkeyPatch object at 0x000001B894A76900> [hook]
          pytest_fixture_setup [hook]
              fixturedef: <FixtureDef argname='mock_inputs' scope='function' baseid='tests/battle/test_battle_rounds.py'>
              request: <SubRequest 'mock_inputs' for <Function test_combat_state_transitions>>
          finish pytest_fixture_setup --> <function mock_inputs.<locals>.configure_mock at 0x000001B894A33560> [hook]
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_combat_state_transitions>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_rounds.py::test_combat_state_transitions' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_rounds.py::test_combat_state_transitions' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_rounds.py::test_combat_state_transitions' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_combat_state_transitions>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_combat_state_transitions>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_combat_state_transitions>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_rounds.py::test_combat_state_transitions' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_rounds.py::test_combat_state_transitions' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_rounds.py::test_combat_state_transitions' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_combat_state_transitions>
            nextitem: <Function test_initiative_order>
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_inputs' scope='function' baseid='tests/battle/test_battle_rounds.py'>
              request: <SubRequest 'mock_inputs' for <Function test_combat_state_transitions>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='mock_inputs' scope='function' baseid='tests/battle/test_battle_rounds.py'>
              request: <SubRequest 'mock_inputs' for <Function test_combat_state_transitions>>
          finish pytest_fixture_post_finalizer --> [] [hook]
          pytest_fixture_post_finalizer [hook]
              fixturedef: <FixtureDef argname='monkeypatch' scope='function' baseid=''>
              request: <SubRequest 'monkeypatch' for <Function test_combat_state_transitions>>
          finish pytest_fixture_post_finalizer --> [] [hook]
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_combat_state_transitions>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_battle_rounds.py::test_combat_state_transitions' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_battle_rounds.py::test_combat_state_transitions' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_battle_rounds.py::test_combat_state_transitions' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_battle_rounds.py::test_combat_state_transitions
            location: ('tests\\battle\\test_battle_rounds.py', 133, 'test_combat_state_transitions')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_initiative_order>
          nextitem: <Function test_round_management>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_flow.py::test_initiative_order
            location: ('tests\\battle\\test_flow.py', 4, 'test_initiative_order')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_initiative_order>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_initiative_order>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_flow.py::test_initiative_order' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_flow.py::test_initiative_order' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_flow.py::test_initiative_order' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_initiative_order>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_initiative_order>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_initiative_order>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_flow.py::test_initiative_order' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_flow.py::test_initiative_order' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_flow.py::test_initiative_order' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_initiative_order>
            nextitem: <Function test_round_management>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_initiative_order>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_flow.py::test_initiative_order' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_flow.py::test_initiative_order' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_flow.py::test_initiative_order' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_flow.py::test_initiative_order
            location: ('tests\\battle\\test_flow.py', 4, 'test_initiative_order')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_round_management>
          nextitem: <Function test_turn_sequence>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_flow.py::test_round_management
            location: ('tests\\battle\\test_flow.py', 18, 'test_round_management')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_round_management>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_round_management>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_flow.py::test_round_management' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_flow.py::test_round_management' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_flow.py::test_round_management' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_round_management>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_round_management>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_round_management>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_flow.py::test_round_management' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_flow.py::test_round_management' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_flow.py::test_round_management' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_round_management>
            nextitem: <Function test_turn_sequence>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_round_management>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_flow.py::test_round_management' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_flow.py::test_round_management' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_flow.py::test_round_management' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_flow.py::test_round_management
            location: ('tests\\battle\\test_flow.py', 18, 'test_round_management')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_turn_sequence>
          nextitem: <Function test_combat_state_transitions>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_flow.py::test_turn_sequence
            location: ('tests\\battle\\test_flow.py', 36, 'test_turn_sequence')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_turn_sequence>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_turn_sequence>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_flow.py::test_turn_sequence' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_flow.py::test_turn_sequence' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_flow.py::test_turn_sequence' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_turn_sequence>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_turn_sequence>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_turn_sequence>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_flow.py::test_turn_sequence' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_flow.py::test_turn_sequence' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_flow.py::test_turn_sequence' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_turn_sequence>
            nextitem: <Function test_combat_state_transitions>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_turn_sequence>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_flow.py::test_turn_sequence' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_flow.py::test_turn_sequence' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_flow.py::test_turn_sequence' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_flow.py::test_turn_sequence
            location: ('tests\\battle\\test_flow.py', 36, 'test_turn_sequence')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_combat_state_transitions>
          nextitem: <Function test_dead_character_state>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_state.py::test_combat_state_transitions
            location: ('tests\\battle\\test_state.py', 4, 'test_combat_state_transitions')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_combat_state_transitions>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_combat_state_transitions>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_state.py::test_combat_state_transitions' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_state.py::test_combat_state_transitions' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_state.py::test_combat_state_transitions' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_combat_state_transitions>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_combat_state_transitions>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_combat_state_transitions>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_state.py::test_combat_state_transitions' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_state.py::test_combat_state_transitions' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_state.py::test_combat_state_transitions' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_combat_state_transitions>
            nextitem: <Function test_dead_character_state>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_combat_state_transitions>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_state.py::test_combat_state_transitions' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_state.py::test_combat_state_transitions' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_state.py::test_combat_state_transitions' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_state.py::test_combat_state_transitions
            location: ('tests\\battle\\test_state.py', 4, 'test_combat_state_transitions')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_dead_character_state>
          nextitem: <Function test_aggro_state>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_state.py::test_dead_character_state
            location: ('tests\\battle\\test_state.py', 24, 'test_dead_character_state')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_dead_character_state>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dead_character_state>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_state.py::test_dead_character_state' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_state.py::test_dead_character_state' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_state.py::test_dead_character_state' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_dead_character_state>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_dead_character_state>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dead_character_state>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_state.py::test_dead_character_state' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_state.py::test_dead_character_state' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_state.py::test_dead_character_state' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_dead_character_state>
            nextitem: <Function test_aggro_state>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_dead_character_state>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_state.py::test_dead_character_state' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_state.py::test_dead_character_state' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_state.py::test_dead_character_state' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_state.py::test_dead_character_state
            location: ('tests\\battle\\test_state.py', 24, 'test_dead_character_state')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_aggro_state>
          nextitem: <Function test_basic_targeting>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_state.py::test_aggro_state
            location: ('tests\\battle\\test_state.py', 42, 'test_aggro_state')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_aggro_state>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_aggro_state>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_state.py::test_aggro_state' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_state.py::test_aggro_state' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_state.py::test_aggro_state' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_aggro_state>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_aggro_state>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_aggro_state>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_state.py::test_aggro_state' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_state.py::test_aggro_state' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_state.py::test_aggro_state' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_aggro_state>
            nextitem: <Function test_basic_targeting>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_aggro_state>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_state.py::test_aggro_state' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_state.py::test_aggro_state' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_state.py::test_aggro_state' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_state.py::test_aggro_state
            location: ('tests\\battle\\test_state.py', 42, 'test_aggro_state')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_basic_targeting>
          nextitem: <Function test_aggro_targeting>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_targeting.py::test_basic_targeting
            location: ('tests\\battle\\test_targeting.py', 3, 'test_basic_targeting')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_basic_targeting>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_basic_targeting>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_targeting.py::test_basic_targeting' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_targeting.py::test_basic_targeting' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_targeting.py::test_basic_targeting' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_basic_targeting>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_basic_targeting>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_basic_targeting>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_targeting.py::test_basic_targeting' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_targeting.py::test_basic_targeting' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_targeting.py::test_basic_targeting' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_basic_targeting>
            nextitem: <Function test_aggro_targeting>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_basic_targeting>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_targeting.py::test_basic_targeting' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_targeting.py::test_basic_targeting' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_targeting.py::test_basic_targeting' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_targeting.py::test_basic_targeting
            location: ('tests\\battle\\test_targeting.py', 3, 'test_basic_targeting')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_aggro_targeting>
          nextitem: <Function test_targeting_restrictions>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_targeting.py::test_aggro_targeting
            location: ('tests\\battle\\test_targeting.py', 16, 'test_aggro_targeting')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_aggro_targeting>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_aggro_targeting>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_targeting.py::test_aggro_targeting' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_targeting.py::test_aggro_targeting' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_targeting.py::test_aggro_targeting' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_aggro_targeting>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_aggro_targeting>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_aggro_targeting>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_targeting.py::test_aggro_targeting' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_targeting.py::test_aggro_targeting' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_targeting.py::test_aggro_targeting' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_aggro_targeting>
            nextitem: <Function test_targeting_restrictions>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_aggro_targeting>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_targeting.py::test_aggro_targeting' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_targeting.py::test_aggro_targeting' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_targeting.py::test_aggro_targeting' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_targeting.py::test_aggro_targeting
            location: ('tests\\battle\\test_targeting.py', 16, 'test_aggro_targeting')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_targeting_restrictions>
          nextitem: <Function test_empty_aggro>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_targeting.py::test_targeting_restrictions
            location: ('tests\\battle\\test_targeting.py', 33, 'test_targeting_restrictions')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_targeting_restrictions>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_targeting_restrictions>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_targeting.py::test_targeting_restrictions' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_targeting.py::test_targeting_restrictions' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_targeting.py::test_targeting_restrictions' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_targeting_restrictions>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_targeting_restrictions>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_targeting_restrictions>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_targeting.py::test_targeting_restrictions' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_targeting.py::test_targeting_restrictions' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_targeting.py::test_targeting_restrictions' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_targeting_restrictions>
            nextitem: <Function test_empty_aggro>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_targeting_restrictions>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_targeting.py::test_targeting_restrictions' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_targeting.py::test_targeting_restrictions' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_targeting.py::test_targeting_restrictions' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_targeting.py::test_targeting_restrictions
            location: ('tests\\battle\\test_targeting.py', 33, 'test_targeting_restrictions')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_empty_aggro>
          nextitem: <Function test_character_creation_validation>
        pytest_runtest_logstart [hook]
            nodeid: tests/battle/test_targeting.py::test_empty_aggro
            location: ('tests\\battle\\test_targeting.py', 51, 'test_empty_aggro')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_empty_aggro>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_empty_aggro>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_targeting.py::test_empty_aggro' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_targeting.py::test_empty_aggro' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_targeting.py::test_empty_aggro' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_empty_aggro>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_empty_aggro>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_empty_aggro>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_targeting.py::test_empty_aggro' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_targeting.py::test_empty_aggro' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_targeting.py::test_empty_aggro' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_empty_aggro>
            nextitem: <Function test_character_creation_validation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_empty_aggro>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/battle/test_targeting.py::test_empty_aggro' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/battle/test_targeting.py::test_empty_aggro' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/battle/test_targeting.py::test_empty_aggro' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/battle/test_targeting.py::test_empty_aggro
            location: ('tests\\battle\\test_targeting.py', 51, 'test_empty_aggro')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_character_creation_validation>
          nextitem: <Function test_stat_modification_validation>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_character_validation.py::test_character_creation_validation
            location: ('tests\\character\\test_character_validation.py', 3, 'test_character_creation_validation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_character_creation_validation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_character_creation_validation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_character_validation.py::test_character_creation_validation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_character_validation.py::test_character_creation_validation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_character_validation.py::test_character_creation_validation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_character_creation_validation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_character_creation_validation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_character_creation_validation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_character_validation.py::test_character_creation_validation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_character_validation.py::test_character_creation_validation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_character_validation.py::test_character_creation_validation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_character_creation_validation>
            nextitem: <Function test_stat_modification_validation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_character_creation_validation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_character_validation.py::test_character_creation_validation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_character_validation.py::test_character_creation_validation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_character_validation.py::test_character_creation_validation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_character_validation.py::test_character_creation_validation
            location: ('tests\\character\\test_character_validation.py', 3, 'test_character_creation_validation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_stat_modification_validation>
          nextitem: <Function test_state_validation>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_character_validation.py::test_stat_modification_validation
            location: ('tests\\character\\test_character_validation.py', 36, 'test_stat_modification_validation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_stat_modification_validation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_stat_modification_validation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_character_validation.py::test_stat_modification_validation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_character_validation.py::test_stat_modification_validation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_character_validation.py::test_stat_modification_validation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_stat_modification_validation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_stat_modification_validation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_stat_modification_validation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_character_validation.py::test_stat_modification_validation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_character_validation.py::test_stat_modification_validation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_character_validation.py::test_stat_modification_validation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_stat_modification_validation>
            nextitem: <Function test_state_validation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_stat_modification_validation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_character_validation.py::test_stat_modification_validation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_character_validation.py::test_stat_modification_validation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_character_validation.py::test_stat_modification_validation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_character_validation.py::test_stat_modification_validation
            location: ('tests\\character\\test_character_validation.py', 36, 'test_stat_modification_validation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_state_validation>
          nextitem: <Function test_tag_system_validation>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_character_validation.py::test_state_validation
            location: ('tests\\character\\test_character_validation.py', 47, 'test_state_validation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_state_validation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_state_validation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_character_validation.py::test_state_validation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_character_validation.py::test_state_validation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_character_validation.py::test_state_validation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_state_validation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_state_validation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_state_validation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_character_validation.py::test_state_validation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_character_validation.py::test_state_validation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_character_validation.py::test_state_validation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_state_validation>
            nextitem: <Function test_tag_system_validation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_state_validation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_character_validation.py::test_state_validation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_character_validation.py::test_state_validation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_character_validation.py::test_state_validation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_character_validation.py::test_state_validation
            location: ('tests\\character\\test_character_validation.py', 47, 'test_state_validation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_tag_system_validation>
          nextitem: <Function test_basic_character_creation>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_character_validation.py::test_tag_system_validation
            location: ('tests\\character\\test_character_validation.py', 59, 'test_tag_system_validation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_tag_system_validation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tag_system_validation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_character_validation.py::test_tag_system_validation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_character_validation.py::test_tag_system_validation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_character_validation.py::test_tag_system_validation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_tag_system_validation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_tag_system_validation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tag_system_validation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_character_validation.py::test_tag_system_validation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_character_validation.py::test_tag_system_validation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_character_validation.py::test_tag_system_validation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_tag_system_validation>
            nextitem: <Function test_basic_character_creation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_tag_system_validation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_character_validation.py::test_tag_system_validation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_character_validation.py::test_tag_system_validation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_character_validation.py::test_tag_system_validation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_character_validation.py::test_tag_system_validation
            location: ('tests\\character\\test_character_validation.py', 59, 'test_tag_system_validation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_basic_character_creation>
          nextitem: <Function test_character_creation_enemy>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_creation.py::test_basic_character_creation
            location: ('tests\\character\\test_creation.py', 3, 'test_basic_character_creation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_basic_character_creation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_basic_character_creation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_creation.py::test_basic_character_creation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_creation.py::test_basic_character_creation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_creation.py::test_basic_character_creation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_basic_character_creation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_basic_character_creation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_basic_character_creation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_creation.py::test_basic_character_creation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_creation.py::test_basic_character_creation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_creation.py::test_basic_character_creation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_basic_character_creation>
            nextitem: <Function test_character_creation_enemy>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_basic_character_creation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_creation.py::test_basic_character_creation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_creation.py::test_basic_character_creation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_creation.py::test_basic_character_creation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_creation.py::test_basic_character_creation
            location: ('tests\\character\\test_creation.py', 3, 'test_basic_character_creation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_character_creation_enemy>
          nextitem: <Function test_character_creation_numeric_inputs>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_creation.py::test_character_creation_enemy
            location: ('tests\\character\\test_creation.py', 26, 'test_character_creation_enemy')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_character_creation_enemy>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_character_creation_enemy>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_creation.py::test_character_creation_enemy' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_creation.py::test_character_creation_enemy' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_creation.py::test_character_creation_enemy' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_character_creation_enemy>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_character_creation_enemy>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_character_creation_enemy>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_creation.py::test_character_creation_enemy' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_creation.py::test_character_creation_enemy' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_creation.py::test_character_creation_enemy' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_character_creation_enemy>
            nextitem: <Function test_character_creation_numeric_inputs>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_character_creation_enemy>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_creation.py::test_character_creation_enemy' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_creation.py::test_character_creation_enemy' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_creation.py::test_character_creation_enemy' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_creation.py::test_character_creation_enemy
            location: ('tests\\character\\test_creation.py', 26, 'test_character_creation_enemy')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_character_creation_numeric_inputs>
          nextitem: <Function test_health_range_validation>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_creation.py::test_character_creation_numeric_inputs
            location: ('tests\\character\\test_creation.py', 44, 'test_character_creation_numeric_inputs')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_character_creation_numeric_inputs>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_character_creation_numeric_inputs>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_creation.py::test_character_creation_numeric_inputs' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_creation.py::test_character_creation_numeric_inputs' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_creation.py::test_character_creation_numeric_inputs' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_character_creation_numeric_inputs>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_character_creation_numeric_inputs>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_character_creation_numeric_inputs>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_creation.py::test_character_creation_numeric_inputs' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_creation.py::test_character_creation_numeric_inputs' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_creation.py::test_character_creation_numeric_inputs' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_character_creation_numeric_inputs>
            nextitem: <Function test_health_range_validation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_character_creation_numeric_inputs>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_creation.py::test_character_creation_numeric_inputs' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_creation.py::test_character_creation_numeric_inputs' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_creation.py::test_character_creation_numeric_inputs' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_creation.py::test_character_creation_numeric_inputs
            location: ('tests\\character\\test_creation.py', 44, 'test_character_creation_numeric_inputs')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_health_range_validation>
          nextitem: <Function test_health_state_consistency>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_health.py::test_health_range_validation
            location: ('tests\\character\\test_health.py', 3, 'test_health_range_validation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_health_range_validation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_health_range_validation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_health.py::test_health_range_validation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_health.py::test_health_range_validation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_health.py::test_health_range_validation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_health_range_validation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_health_range_validation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_health_range_validation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_health.py::test_health_range_validation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_health.py::test_health_range_validation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_health.py::test_health_range_validation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_health_range_validation>
            nextitem: <Function test_health_state_consistency>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_health_range_validation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_health.py::test_health_range_validation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_health.py::test_health_range_validation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_health.py::test_health_range_validation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_health.py::test_health_range_validation
            location: ('tests\\character\\test_health.py', 3, 'test_health_range_validation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_health_state_consistency>
          nextitem: <Function test_death_state>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_health.py::test_health_state_consistency
            location: ('tests\\character\\test_health.py', 21, 'test_health_state_consistency')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_health_state_consistency>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_health_state_consistency>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_health.py::test_health_state_consistency' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_health.py::test_health_state_consistency' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_health.py::test_health_state_consistency' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_health_state_consistency>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_health_state_consistency>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_health_state_consistency>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_health.py::test_health_state_consistency' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_health.py::test_health_state_consistency' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_health.py::test_health_state_consistency' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_health_state_consistency>
            nextitem: <Function test_death_state>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_health_state_consistency>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_health.py::test_health_state_consistency' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_health.py::test_health_state_consistency' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_health.py::test_health_state_consistency' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_health.py::test_health_state_consistency
            location: ('tests\\character\\test_health.py', 21, 'test_health_state_consistency')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_death_state>
          nextitem: <Function test_cross_character_effects>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_health.py::test_death_state
            location: ('tests\\character\\test_health.py', 40, 'test_death_state')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_death_state>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_death_state>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_health.py::test_death_state' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_health.py::test_death_state' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_health.py::test_death_state' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_death_state>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_death_state>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_death_state>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_health.py::test_death_state' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_health.py::test_death_state' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_health.py::test_death_state' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_death_state>
            nextitem: <Function test_cross_character_effects>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_death_state>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_health.py::test_death_state' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_health.py::test_death_state' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_health.py::test_death_state' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_health.py::test_death_state
            location: ('tests\\character\\test_health.py', 40, 'test_death_state')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_cross_character_effects>
          nextitem: <Function test_shared_state_handling>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_interactions.py::test_cross_character_effects
            location: ('tests\\character\\test_interactions.py', 3, 'test_cross_character_effects')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_cross_character_effects>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_cross_character_effects>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_interactions.py::test_cross_character_effects' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_interactions.py::test_cross_character_effects' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_interactions.py::test_cross_character_effects' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_cross_character_effects>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_cross_character_effects>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_cross_character_effects>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_interactions.py::test_cross_character_effects' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_interactions.py::test_cross_character_effects' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_interactions.py::test_cross_character_effects' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_cross_character_effects>
            nextitem: <Function test_shared_state_handling>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_cross_character_effects>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_interactions.py::test_cross_character_effects' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_interactions.py::test_cross_character_effects' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_interactions.py::test_cross_character_effects' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_interactions.py::test_cross_character_effects
            location: ('tests\\character\\test_interactions.py', 3, 'test_cross_character_effects')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_shared_state_handling>
          nextitem: <Function test_team_based_interactions>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_interactions.py::test_shared_state_handling
            location: ('tests\\character\\test_interactions.py', 28, 'test_shared_state_handling')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_shared_state_handling>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_shared_state_handling>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_interactions.py::test_shared_state_handling' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_interactions.py::test_shared_state_handling' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_interactions.py::test_shared_state_handling' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_shared_state_handling>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_shared_state_handling>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_shared_state_handling>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_interactions.py::test_shared_state_handling' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_interactions.py::test_shared_state_handling' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_interactions.py::test_shared_state_handling' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_shared_state_handling>
            nextitem: <Function test_team_based_interactions>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_shared_state_handling>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_interactions.py::test_shared_state_handling' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_interactions.py::test_shared_state_handling' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_interactions.py::test_shared_state_handling' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_interactions.py::test_shared_state_handling
            location: ('tests\\character\\test_interactions.py', 28, 'test_shared_state_handling')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_team_based_interactions>
          nextitem: <Function test_reference_handling>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_interactions.py::test_team_based_interactions
            location: ('tests\\character\\test_interactions.py', 46, 'test_team_based_interactions')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_team_based_interactions>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_team_based_interactions>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_interactions.py::test_team_based_interactions' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_interactions.py::test_team_based_interactions' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_interactions.py::test_team_based_interactions' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_team_based_interactions>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_team_based_interactions>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_team_based_interactions>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_interactions.py::test_team_based_interactions' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_interactions.py::test_team_based_interactions' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_interactions.py::test_team_based_interactions' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_team_based_interactions>
            nextitem: <Function test_reference_handling>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_team_based_interactions>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_interactions.py::test_team_based_interactions' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_interactions.py::test_team_based_interactions' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_interactions.py::test_team_based_interactions' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_interactions.py::test_team_based_interactions
            location: ('tests\\character\\test_interactions.py', 46, 'test_team_based_interactions')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_reference_handling>
          nextitem: <Function test_stat_range_validation>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_interactions.py::test_reference_handling
            location: ('tests\\character\\test_interactions.py', 74, 'test_reference_handling')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_reference_handling>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reference_handling>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_interactions.py::test_reference_handling' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_interactions.py::test_reference_handling' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_interactions.py::test_reference_handling' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_reference_handling>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_reference_handling>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reference_handling>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_interactions.py::test_reference_handling' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_interactions.py::test_reference_handling' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_interactions.py::test_reference_handling' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_reference_handling>
            nextitem: <Function test_stat_range_validation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_reference_handling>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_interactions.py::test_reference_handling' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_interactions.py::test_reference_handling' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_interactions.py::test_reference_handling' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_interactions.py::test_reference_handling
            location: ('tests\\character\\test_interactions.py', 74, 'test_reference_handling')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_stat_range_validation>
          nextitem: <Function test_stat_type_validation>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_stats.py::test_stat_range_validation
            location: ('tests\\character\\test_stats.py', 3, 'test_stat_range_validation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_stat_range_validation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_stat_range_validation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_stats.py::test_stat_range_validation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_stats.py::test_stat_range_validation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_stats.py::test_stat_range_validation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_stat_range_validation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_stat_range_validation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_stat_range_validation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_stats.py::test_stat_range_validation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_stats.py::test_stat_range_validation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_stats.py::test_stat_range_validation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_stat_range_validation>
            nextitem: <Function test_stat_type_validation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_stat_range_validation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_stats.py::test_stat_range_validation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_stats.py::test_stat_range_validation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_stats.py::test_stat_range_validation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_stats.py::test_stat_range_validation
            location: ('tests\\character\\test_stats.py', 3, 'test_stat_range_validation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_stat_type_validation>
          nextitem: <Function test_stat_consistency>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_stats.py::test_stat_type_validation
            location: ('tests\\character\\test_stats.py', 11, 'test_stat_type_validation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_stat_type_validation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_stat_type_validation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_stats.py::test_stat_type_validation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_stats.py::test_stat_type_validation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_stats.py::test_stat_type_validation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_stat_type_validation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_stat_type_validation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_stat_type_validation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_stats.py::test_stat_type_validation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_stats.py::test_stat_type_validation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_stats.py::test_stat_type_validation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_stat_type_validation>
            nextitem: <Function test_stat_consistency>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_stat_type_validation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_stats.py::test_stat_type_validation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_stats.py::test_stat_type_validation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_stats.py::test_stat_type_validation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_stats.py::test_stat_type_validation
            location: ('tests\\character\\test_stats.py', 11, 'test_stat_type_validation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_stat_consistency>
          nextitem: <Function test_temp_hp_stacking>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_stats.py::test_stat_consistency
            location: ('tests\\character\\test_stats.py', 25, 'test_stat_consistency')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_stat_consistency>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_stat_consistency>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_stats.py::test_stat_consistency' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_stats.py::test_stat_consistency' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_stats.py::test_stat_consistency' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_stat_consistency>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_stat_consistency>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_stat_consistency>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_stats.py::test_stat_consistency' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_stats.py::test_stat_consistency' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_stats.py::test_stat_consistency' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_stat_consistency>
            nextitem: <Function test_temp_hp_stacking>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_stat_consistency>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_stats.py::test_stat_consistency' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_stats.py::test_stat_consistency' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_stats.py::test_stat_consistency' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_stats.py::test_stat_consistency
            location: ('tests\\character\\test_stats.py', 25, 'test_stat_consistency')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_temp_hp_stacking>
          nextitem: <Function test_temp_hp_damage_absorption>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_temp_hp.py::test_temp_hp_stacking
            location: ('tests\\character\\test_temp_hp.py', 4, 'test_temp_hp_stacking')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_temp_hp_stacking>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_hp_stacking>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_stacking' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_stacking' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_stacking' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_temp_hp_stacking>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_temp_hp_stacking>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_hp_stacking>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_stacking' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_stacking' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_stacking' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_temp_hp_stacking>
            nextitem: <Function test_temp_hp_damage_absorption>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_hp_stacking>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_stacking' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_stacking' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_stacking' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_temp_hp.py::test_temp_hp_stacking
            location: ('tests\\character\\test_temp_hp.py', 4, 'test_temp_hp_stacking')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_temp_hp_damage_absorption>
          nextitem: <Function test_temp_hp_damage_types>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_temp_hp.py::test_temp_hp_damage_absorption
            location: ('tests\\character\\test_temp_hp.py', 30, 'test_temp_hp_damage_absorption')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_temp_hp_damage_absorption>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_hp_damage_absorption>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_absorption' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_absorption' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_absorption' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_temp_hp_damage_absorption>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_temp_hp_damage_absorption>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_hp_damage_absorption>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_absorption' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_absorption' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_absorption' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_temp_hp_damage_absorption>
            nextitem: <Function test_temp_hp_damage_types>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_hp_damage_absorption>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_absorption' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_absorption' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_absorption' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_temp_hp.py::test_temp_hp_damage_absorption
            location: ('tests\\character\\test_temp_hp.py', 30, 'test_temp_hp_damage_absorption')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_temp_hp_damage_types>
          nextitem: <Function test_temp_hp_edge_cases>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_temp_hp.py::test_temp_hp_damage_types
            location: ('tests\\character\\test_temp_hp.py', 56, 'test_temp_hp_damage_types')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_temp_hp_damage_types>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_hp_damage_types>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_types' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_types' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_types' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_temp_hp_damage_types>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_temp_hp_damage_types>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_hp_damage_types>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_types' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_types' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_types' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_temp_hp_damage_types>
            nextitem: <Function test_temp_hp_edge_cases>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_hp_damage_types>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_types' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_types' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_damage_types' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_temp_hp.py::test_temp_hp_damage_types
            location: ('tests\\character\\test_temp_hp.py', 56, 'test_temp_hp_damage_types')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_temp_hp_edge_cases>
          nextitem: <Function test_resistance_edge_cases>
        pytest_runtest_logstart [hook]
            nodeid: tests/character/test_temp_hp.py::test_temp_hp_edge_cases
            location: ('tests\\character\\test_temp_hp.py', 83, 'test_temp_hp_edge_cases')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_temp_hp_edge_cases>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_hp_edge_cases>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_edge_cases' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_edge_cases' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_edge_cases' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_temp_hp_edge_cases>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_temp_hp_edge_cases>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_hp_edge_cases>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_edge_cases' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_edge_cases' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_edge_cases' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_temp_hp_edge_cases>
            nextitem: <Function test_resistance_edge_cases>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_hp_edge_cases>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_edge_cases' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_edge_cases' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/character/test_temp_hp.py::test_temp_hp_edge_cases' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/character/test_temp_hp.py::test_temp_hp_edge_cases
            location: ('tests\\character\\test_temp_hp.py', 83, 'test_temp_hp_edge_cases')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_resistance_edge_cases>
          nextitem: <Function test_damage_type_validation>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_combat_edge_cases.py::test_resistance_edge_cases
            location: ('tests\\combat\\test_combat_edge_cases.py', 3, 'test_resistance_edge_cases')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_resistance_edge_cases>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_resistance_edge_cases>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combat_edge_cases.py::test_resistance_edge_cases' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_resistance_edge_cases' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_resistance_edge_cases' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_resistance_edge_cases>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_resistance_edge_cases>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_resistance_edge_cases>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combat_edge_cases.py::test_resistance_edge_cases' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_resistance_edge_cases' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_resistance_edge_cases' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_resistance_edge_cases>
            nextitem: <Function test_damage_type_validation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_resistance_edge_cases>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combat_edge_cases.py::test_resistance_edge_cases' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_resistance_edge_cases' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_resistance_edge_cases' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_combat_edge_cases.py::test_resistance_edge_cases
            location: ('tests\\combat\\test_combat_edge_cases.py', 3, 'test_resistance_edge_cases')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_damage_type_validation>
          nextitem: <Function test_healing_edge_cases>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_combat_edge_cases.py::test_damage_type_validation
            location: ('tests\\combat\\test_combat_edge_cases.py', 38, 'test_damage_type_validation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_damage_type_validation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_type_validation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_type_validation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_type_validation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_type_validation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_damage_type_validation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_damage_type_validation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_type_validation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_type_validation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_type_validation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_type_validation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_damage_type_validation>
            nextitem: <Function test_healing_edge_cases>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_type_validation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_type_validation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_type_validation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_type_validation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_combat_edge_cases.py::test_damage_type_validation
            location: ('tests\\combat\\test_combat_edge_cases.py', 38, 'test_damage_type_validation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_healing_edge_cases>
          nextitem: <Function test_damage_calculation_error_handling>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_combat_edge_cases.py::test_healing_edge_cases
            location: ('tests\\combat\\test_combat_edge_cases.py', 63, 'test_healing_edge_cases')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_healing_edge_cases>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_edge_cases>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combat_edge_cases.py::test_healing_edge_cases' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_healing_edge_cases' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_healing_edge_cases' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_healing_edge_cases>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_healing_edge_cases>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_edge_cases>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combat_edge_cases.py::test_healing_edge_cases' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_healing_edge_cases' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_healing_edge_cases' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_healing_edge_cases>
            nextitem: <Function test_damage_calculation_error_handling>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_edge_cases>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combat_edge_cases.py::test_healing_edge_cases' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_healing_edge_cases' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_healing_edge_cases' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_combat_edge_cases.py::test_healing_edge_cases
            location: ('tests\\combat\\test_combat_edge_cases.py', 63, 'test_healing_edge_cases')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_damage_calculation_error_handling>
          nextitem: <Function test_damage_type_combinations>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_combat_edge_cases.py::test_damage_calculation_error_handling
            location: ('tests\\combat\\test_combat_edge_cases.py', 86, 'test_damage_calculation_error_handling')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_damage_calculation_error_handling>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_calculation_error_handling>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_calculation_error_handling' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_calculation_error_handling' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_calculation_error_handling' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_damage_calculation_error_handling>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_damage_calculation_error_handling>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_calculation_error_handling>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_calculation_error_handling' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_calculation_error_handling' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_calculation_error_handling' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_damage_calculation_error_handling>
            nextitem: <Function test_damage_type_combinations>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_calculation_error_handling>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_calculation_error_handling' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_calculation_error_handling' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combat_edge_cases.py::test_damage_calculation_error_handling' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_combat_edge_cases.py::test_damage_calculation_error_handling
            location: ('tests\\combat\\test_combat_edge_cases.py', 86, 'test_damage_calculation_error_handling')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_damage_type_combinations>
          nextitem: <Function test_healing_type_combinations>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_combinations.py::test_damage_type_combinations
            location: ('tests\\combat\\test_combinations.py', 3, 'test_damage_type_combinations')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_damage_type_combinations>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_type_combinations>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combinations.py::test_damage_type_combinations' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combinations.py::test_damage_type_combinations' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combinations.py::test_damage_type_combinations' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_damage_type_combinations>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_damage_type_combinations>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_type_combinations>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combinations.py::test_damage_type_combinations' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combinations.py::test_damage_type_combinations' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combinations.py::test_damage_type_combinations' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_damage_type_combinations>
            nextitem: <Function test_healing_type_combinations>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_type_combinations>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combinations.py::test_damage_type_combinations' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combinations.py::test_damage_type_combinations' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combinations.py::test_damage_type_combinations' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_combinations.py::test_damage_type_combinations
            location: ('tests\\combat\\test_combinations.py', 3, 'test_damage_type_combinations')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_healing_type_combinations>
          nextitem: <Function test_resistance_combinations>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_combinations.py::test_healing_type_combinations
            location: ('tests\\combat\\test_combinations.py', 42, 'test_healing_type_combinations')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_healing_type_combinations>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_type_combinations>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combinations.py::test_healing_type_combinations' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combinations.py::test_healing_type_combinations' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combinations.py::test_healing_type_combinations' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_healing_type_combinations>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_healing_type_combinations>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_type_combinations>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combinations.py::test_healing_type_combinations' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combinations.py::test_healing_type_combinations' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combinations.py::test_healing_type_combinations' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_healing_type_combinations>
            nextitem: <Function test_resistance_combinations>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_type_combinations>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combinations.py::test_healing_type_combinations' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combinations.py::test_healing_type_combinations' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combinations.py::test_healing_type_combinations' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_combinations.py::test_healing_type_combinations
            location: ('tests\\combat\\test_combinations.py', 42, 'test_healing_type_combinations')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_resistance_combinations>
          nextitem: <Function test_edge_case_combinations>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_combinations.py::test_resistance_combinations
            location: ('tests\\combat\\test_combinations.py', 75, 'test_resistance_combinations')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_resistance_combinations>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_resistance_combinations>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combinations.py::test_resistance_combinations' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combinations.py::test_resistance_combinations' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combinations.py::test_resistance_combinations' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_resistance_combinations>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_resistance_combinations>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_resistance_combinations>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combinations.py::test_resistance_combinations' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combinations.py::test_resistance_combinations' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combinations.py::test_resistance_combinations' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_resistance_combinations>
            nextitem: <Function test_edge_case_combinations>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_resistance_combinations>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combinations.py::test_resistance_combinations' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combinations.py::test_resistance_combinations' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combinations.py::test_resistance_combinations' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_combinations.py::test_resistance_combinations
            location: ('tests\\combat\\test_combinations.py', 75, 'test_resistance_combinations')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_edge_case_combinations>
          nextitem: <Function test_damage_calculation>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_combinations.py::test_edge_case_combinations
            location: ('tests\\combat\\test_combinations.py', 106, 'test_edge_case_combinations')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_edge_case_combinations>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_edge_case_combinations>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combinations.py::test_edge_case_combinations' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combinations.py::test_edge_case_combinations' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combinations.py::test_edge_case_combinations' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_edge_case_combinations>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_edge_case_combinations>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_edge_case_combinations>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combinations.py::test_edge_case_combinations' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combinations.py::test_edge_case_combinations' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combinations.py::test_edge_case_combinations' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_edge_case_combinations>
            nextitem: <Function test_damage_calculation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_edge_case_combinations>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_combinations.py::test_edge_case_combinations' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_combinations.py::test_edge_case_combinations' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_combinations.py::test_edge_case_combinations' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_combinations.py::test_edge_case_combinations
            location: ('tests\\combat\\test_combinations.py', 106, 'test_edge_case_combinations')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_damage_calculation>
          nextitem: <Function test_damage_resistance>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_damage.py::test_damage_calculation
            location: ('tests\\combat\\test_damage.py', 3, 'test_damage_calculation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_damage_calculation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_calculation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_damage.py::test_damage_calculation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_damage.py::test_damage_calculation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_damage.py::test_damage_calculation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_damage_calculation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_damage_calculation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_calculation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_damage.py::test_damage_calculation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_damage.py::test_damage_calculation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_damage.py::test_damage_calculation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_damage_calculation>
            nextitem: <Function test_damage_resistance>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_calculation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_damage.py::test_damage_calculation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_damage.py::test_damage_calculation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_damage.py::test_damage_calculation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_damage.py::test_damage_calculation
            location: ('tests\\combat\\test_damage.py', 3, 'test_damage_calculation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_damage_resistance>
          nextitem: <Function test_damage_edge_cases>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_damage.py::test_damage_resistance
            location: ('tests\\combat\\test_damage.py', 24, 'test_damage_resistance')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_damage_resistance>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_resistance>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_damage.py::test_damage_resistance' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_damage.py::test_damage_resistance' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_damage.py::test_damage_resistance' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_damage_resistance>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_damage_resistance>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_resistance>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_damage.py::test_damage_resistance' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_damage.py::test_damage_resistance' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_damage.py::test_damage_resistance' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_damage_resistance>
            nextitem: <Function test_damage_edge_cases>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_resistance>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_damage.py::test_damage_resistance' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_damage.py::test_damage_resistance' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_damage.py::test_damage_resistance' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_damage.py::test_damage_resistance
            location: ('tests\\combat\\test_damage.py', 24, 'test_damage_resistance')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_damage_edge_cases>
          nextitem: <Function test_generate_aggro_damage>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_damage.py::test_damage_edge_cases
            location: ('tests\\combat\\test_damage.py', 45, 'test_damage_edge_cases')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_damage_edge_cases>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_edge_cases>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_damage.py::test_damage_edge_cases' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_damage.py::test_damage_edge_cases' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_damage.py::test_damage_edge_cases' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_damage_edge_cases>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_damage_edge_cases>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_edge_cases>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_damage.py::test_damage_edge_cases' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_damage.py::test_damage_edge_cases' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_damage.py::test_damage_edge_cases' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_damage_edge_cases>
            nextitem: <Function test_generate_aggro_damage>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_edge_cases>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_damage.py::test_damage_edge_cases' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_damage.py::test_damage_edge_cases' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_damage.py::test_damage_edge_cases' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_damage.py::test_damage_edge_cases
            location: ('tests\\combat\\test_damage.py', 45, 'test_damage_edge_cases')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_generate_aggro_damage>
          nextitem: <Function test_healing_calculation>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_damage.py::test_generate_aggro_damage
            location: ('tests\\combat\\test_damage.py', 76, 'test_generate_aggro_damage')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_generate_aggro_damage>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_aggro_damage>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_damage.py::test_generate_aggro_damage' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_damage.py::test_generate_aggro_damage' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_damage.py::test_generate_aggro_damage' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_generate_aggro_damage>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_generate_aggro_damage>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_aggro_damage>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_damage.py::test_generate_aggro_damage' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_damage.py::test_generate_aggro_damage' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_damage.py::test_generate_aggro_damage' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_generate_aggro_damage>
            nextitem: <Function test_healing_calculation>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_generate_aggro_damage>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_damage.py::test_generate_aggro_damage' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_damage.py::test_generate_aggro_damage' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_damage.py::test_generate_aggro_damage' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_damage.py::test_generate_aggro_damage
            location: ('tests\\combat\\test_damage.py', 76, 'test_generate_aggro_damage')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_healing_calculation>
          nextitem: <Function test_temp_healing>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_healing.py::test_healing_calculation
            location: ('tests\\combat\\test_healing.py', 3, 'test_healing_calculation')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_healing_calculation>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_calculation>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_healing.py::test_healing_calculation' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_healing.py::test_healing_calculation' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_healing.py::test_healing_calculation' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_healing_calculation>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_healing_calculation>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_calculation>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_healing.py::test_healing_calculation' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_healing.py::test_healing_calculation' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_healing.py::test_healing_calculation' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_healing_calculation>
            nextitem: <Function test_temp_healing>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_calculation>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_healing.py::test_healing_calculation' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_healing.py::test_healing_calculation' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_healing.py::test_healing_calculation' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_healing.py::test_healing_calculation
            location: ('tests\\combat\\test_healing.py', 3, 'test_healing_calculation')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_temp_healing>
          nextitem: <Function test_healing_edge_cases>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_healing.py::test_temp_healing
            location: ('tests\\combat\\test_healing.py', 18, 'test_temp_healing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_temp_healing>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_healing>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_healing.py::test_temp_healing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_healing.py::test_temp_healing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_healing.py::test_temp_healing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_temp_healing>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_temp_healing>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_healing>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_healing.py::test_temp_healing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_healing.py::test_temp_healing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_healing.py::test_temp_healing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_temp_healing>
            nextitem: <Function test_healing_edge_cases>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_temp_healing>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_healing.py::test_temp_healing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_healing.py::test_temp_healing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_healing.py::test_temp_healing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_healing.py::test_temp_healing
            location: ('tests\\combat\\test_healing.py', 18, 'test_temp_healing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_healing_edge_cases>
          nextitem: <Function test_damage_input_edge_cases>
        pytest_runtest_logstart [hook]
            nodeid: tests/combat/test_healing.py::test_healing_edge_cases
            location: ('tests\\combat\\test_healing.py', 32, 'test_healing_edge_cases')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_healing_edge_cases>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_edge_cases>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_healing.py::test_healing_edge_cases' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_healing.py::test_healing_edge_cases' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_healing.py::test_healing_edge_cases' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_healing_edge_cases>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_healing_edge_cases>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_edge_cases>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_healing.py::test_healing_edge_cases' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_healing.py::test_healing_edge_cases' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_healing.py::test_healing_edge_cases' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_healing_edge_cases>
            nextitem: <Function test_damage_input_edge_cases>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_edge_cases>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/combat/test_healing.py::test_healing_edge_cases' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/combat/test_healing.py::test_healing_edge_cases' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/combat/test_healing.py::test_healing_edge_cases' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/combat/test_healing.py::test_healing_edge_cases
            location: ('tests\\combat\\test_healing.py', 32, 'test_healing_edge_cases')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_damage_input_edge_cases>
          nextitem: <Function test_healing_input_edge_cases>
        pytest_runtest_logstart [hook]
            nodeid: tests/input/test_input_validation.py::test_damage_input_edge_cases
            location: ('tests\\input\\test_input_validation.py', 3, 'test_damage_input_edge_cases')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_damage_input_edge_cases>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_input_edge_cases>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_input_validation.py::test_damage_input_edge_cases' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_input_validation.py::test_damage_input_edge_cases' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_input_validation.py::test_damage_input_edge_cases' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_damage_input_edge_cases>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_damage_input_edge_cases>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_input_edge_cases>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_input_validation.py::test_damage_input_edge_cases' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_input_validation.py::test_damage_input_edge_cases' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_input_validation.py::test_damage_input_edge_cases' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_damage_input_edge_cases>
            nextitem: <Function test_healing_input_edge_cases>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_input_edge_cases>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_input_validation.py::test_damage_input_edge_cases' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_input_validation.py::test_damage_input_edge_cases' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_input_validation.py::test_damage_input_edge_cases' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/input/test_input_validation.py::test_damage_input_edge_cases
            location: ('tests\\input\\test_input_validation.py', 3, 'test_damage_input_edge_cases')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_healing_input_edge_cases>
          nextitem: <Function test_input_retry_mechanism>
        pytest_runtest_logstart [hook]
            nodeid: tests/input/test_input_validation.py::test_healing_input_edge_cases
            location: ('tests\\input\\test_input_validation.py', 46, 'test_healing_input_edge_cases')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_healing_input_edge_cases>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_input_edge_cases>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_input_validation.py::test_healing_input_edge_cases' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_input_validation.py::test_healing_input_edge_cases' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_input_validation.py::test_healing_input_edge_cases' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_healing_input_edge_cases>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_healing_input_edge_cases>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_input_edge_cases>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_input_validation.py::test_healing_input_edge_cases' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_input_validation.py::test_healing_input_edge_cases' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_input_validation.py::test_healing_input_edge_cases' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_healing_input_edge_cases>
            nextitem: <Function test_input_retry_mechanism>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_input_edge_cases>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_input_validation.py::test_healing_input_edge_cases' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_input_validation.py::test_healing_input_edge_cases' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_input_validation.py::test_healing_input_edge_cases' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/input/test_input_validation.py::test_healing_input_edge_cases
            location: ('tests\\input\\test_input_validation.py', 46, 'test_healing_input_edge_cases')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_input_retry_mechanism>
          nextitem: <Function test_damage_input_parsing>
        pytest_runtest_logstart [hook]
            nodeid: tests/input/test_input_validation.py::test_input_retry_mechanism
            location: ('tests\\input\\test_input_validation.py', 86, 'test_input_retry_mechanism')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_input_retry_mechanism>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_input_retry_mechanism>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_input_validation.py::test_input_retry_mechanism' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_input_validation.py::test_input_retry_mechanism' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_input_validation.py::test_input_retry_mechanism' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_input_retry_mechanism>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_input_retry_mechanism>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_input_retry_mechanism>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_input_validation.py::test_input_retry_mechanism' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_input_validation.py::test_input_retry_mechanism' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_input_validation.py::test_input_retry_mechanism' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_input_retry_mechanism>
            nextitem: <Function test_damage_input_parsing>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_input_retry_mechanism>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_input_validation.py::test_input_retry_mechanism' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_input_validation.py::test_input_retry_mechanism' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_input_validation.py::test_input_retry_mechanism' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/input/test_input_validation.py::test_input_retry_mechanism
            location: ('tests\\input\\test_input_validation.py', 86, 'test_input_retry_mechanism')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_damage_input_parsing>
          nextitem: <Function test_healing_input_parsing>
        pytest_runtest_logstart [hook]
            nodeid: tests/input/test_parsing.py::test_damage_input_parsing
            location: ('tests\\input\\test_parsing.py', 3, 'test_damage_input_parsing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_damage_input_parsing>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_input_parsing>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_parsing.py::test_damage_input_parsing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_parsing.py::test_damage_input_parsing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_parsing.py::test_damage_input_parsing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_damage_input_parsing>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_damage_input_parsing>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_input_parsing>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_parsing.py::test_damage_input_parsing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_parsing.py::test_damage_input_parsing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_parsing.py::test_damage_input_parsing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_damage_input_parsing>
            nextitem: <Function test_healing_input_parsing>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_damage_input_parsing>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_parsing.py::test_damage_input_parsing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_parsing.py::test_damage_input_parsing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_parsing.py::test_damage_input_parsing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/input/test_parsing.py::test_damage_input_parsing
            location: ('tests\\input\\test_parsing.py', 3, 'test_damage_input_parsing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_healing_input_parsing>
          nextitem: <Function test_input_edge_cases>
        pytest_runtest_logstart [hook]
            nodeid: tests/input/test_parsing.py::test_healing_input_parsing
            location: ('tests\\input\\test_parsing.py', 58, 'test_healing_input_parsing')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_healing_input_parsing>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_input_parsing>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_parsing.py::test_healing_input_parsing' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_parsing.py::test_healing_input_parsing' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_parsing.py::test_healing_input_parsing' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_healing_input_parsing>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_healing_input_parsing>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_input_parsing>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_parsing.py::test_healing_input_parsing' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_parsing.py::test_healing_input_parsing' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_parsing.py::test_healing_input_parsing' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_healing_input_parsing>
            nextitem: <Function test_input_edge_cases>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_healing_input_parsing>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_parsing.py::test_healing_input_parsing' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_parsing.py::test_healing_input_parsing' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_parsing.py::test_healing_input_parsing' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/input/test_parsing.py::test_healing_input_parsing
            location: ('tests\\input\\test_parsing.py', 58, 'test_healing_input_parsing')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_input_edge_cases>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: tests/input/test_parsing.py::test_input_edge_cases
            location: ('tests\\input\\test_parsing.py', 87, 'test_input_edge_cases')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_input_edge_cases>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_input_edge_cases>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_parsing.py::test_input_edge_cases' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_parsing.py::test_input_edge_cases' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_parsing.py::test_input_edge_cases' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_input_edge_cases>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_input_edge_cases>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_input_edge_cases>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_parsing.py::test_input_edge_cases' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_parsing.py::test_input_edge_cases' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_parsing.py::test_input_edge_cases' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_input_edge_cases>
            nextitem: None
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_input_edge_cases>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'tests/input/test_parsing.py::test_input_edge_cases' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'tests/input/test_parsing.py::test_input_edge_cases' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'tests/input/test_parsing.py::test_input_edge_cases' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B891D9A2D0>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: tests/input/test_parsing.py::test_input_edge_cases
            location: ('tests\\input\\test_parsing.py', 87, 'test_input_edge_cases')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session BattleBot exitstatus=0 testsfailed=0 testscollected=62>
        exitstatus: 0
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x000001B8928854F0>
          exitstatus: 0
          config: <_pytest.config.Config object at 0x000001B891D9A2D0>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x000001B891D9A2D0>
    finish pytest_unconfigure --> [] [hook]
